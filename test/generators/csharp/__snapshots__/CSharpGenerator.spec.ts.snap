// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CSharpGenerator class renderer should be able to overwrite accessor preset hook 1`] = `
"public class CustomClass {
  private string property;
  private Dictionary<string, string> additionalProperties;

  my own custom factory

  my own custom factory
}"
`;

exports[`CSharpGenerator class renderer should be able to overwrite property preset hook 1`] = `
"public class CustomClass {
  my own property
  my own property

  public string Property 
  {
    get { return property; }
    set { property = value; }
  }

  public Dictionary<string, string> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should not render reserved keyword 1`] = `
"public class Address {
  private string reservedReservedEnum;
  private string reservedEnum;

  public string ReservedReservedEnum 
  {
    get { return reservedReservedEnum; }
    set { reservedReservedEnum = value; }
  }

  public string ReservedEnum 
  {
    get { return reservedEnum; }
    set { reservedEnum = value; }
  }
}"
`;

exports[`CSharpGenerator should not render reserved keyword 2`] = `
"public class Address {
  private string reservedReservedEnum;
  private string reservedEnum;

  public string ReservedReservedEnum 
  {
    get { return reservedReservedEnum; }
    set { reservedReservedEnum = value; }
  }

  public string ReservedEnum 
  {
    get { return reservedEnum; }
    set { reservedEnum = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`class\` type 1`] = `
"public class Address {
  private string streetName;
  private string city;
  private string state;
  private float? houseNumber;
  private bool? marriage;
  private dynamic members;
  private dynamic[] tupleType;
  private string[] arrayType;
  private Dictionary<string, string> additionalProperties;
  private Dictionary<string, string> sTestPatternProperties;

  public string StreetName 
  {
    get { return streetName; }
    set { streetName = value; }
  }

  public string City 
  {
    get { return city; }
    set { city = value; }
  }

  public string State 
  {
    get { return state; }
    set { state = value; }
  }

  public float? HouseNumber 
  {
    get { return houseNumber; }
    set { houseNumber = value; }
  }

  public bool? Marriage 
  {
    get { return marriage; }
    set { marriage = value; }
  }

  public dynamic Members 
  {
    get { return members; }
    set { members = value; }
  }

  public dynamic[] TupleType 
  {
    get { return tupleType; }
    set { tupleType = value; }
  }

  public string[] ArrayType 
  {
    get { return arrayType; }
    set { arrayType = value; }
  }

  public Dictionary<string, string> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public Dictionary<string, string> STestPatternProperties 
  {
    get { return sTestPatternProperties; }
    set { sTestPatternProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`class\` type 2`] = `
"public class Address {
  private string streetName;
  private string city;
  private string state;
  private float? houseNumber;
  private bool? marriage;
  private dynamic members;
  private dynamic[] tupleType;
  private string[] arrayType;
  private Dictionary<string, string> additionalProperties;
  private Dictionary<string, string> sTestPatternProperties;

  public string StreetName 
  {
    get { return streetName; }
    set { streetName = value; }
  }

  public string City 
  {
    get { return city; }
    set { city = value; }
  }

  public string State 
  {
    get { return state; }
    set { state = value; }
  }

  public float? HouseNumber 
  {
    get { return houseNumber; }
    set { houseNumber = value; }
  }

  public bool? Marriage 
  {
    get { return marriage; }
    set { marriage = value; }
  }

  public dynamic Members 
  {
    get { return members; }
    set { members = value; }
  }

  public dynamic[] TupleType 
  {
    get { return tupleType; }
    set { tupleType = value; }
  }

  public string[] ArrayType 
  {
    get { return arrayType; }
    set { arrayType = value; }
  }

  public Dictionary<string, string> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public Dictionary<string, string> STestPatternProperties 
  {
    get { return sTestPatternProperties; }
    set { sTestPatternProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`enum\` type with enums of mixed types 1`] = `
"public enum Things {
  Texas, String_1, Number_1, False, TestTest
}
public static class ThingsExtensions {
  public static dynamic GetValue(this Things enumValue)
  {
    switch (enumValue)
    {
      case Things.Texas: return \\"Texas\\";
      case Things.String_1: return \\"1\\";
      case Things.Number_1: return 1;
      case Things.False: return false;
      case Things.TestTest: return \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\";
    }
    return null;
  }

  public static Things? ToThings(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return Things.Texas;
      case \\"1\\": return Things.String_1;
      case 1: return Things.Number_1;
      case false: return Things.False;
      case \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\": return Things.TestTest;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should render \`enum\` type with enums of mixed types 2`] = `
"public enum Things {
  Texas, String_1, Number_1, False, TestTest
}
public static class ThingsExtensions {
  public static dynamic GetValue(this Things enumValue)
  {
    switch (enumValue)
    {
      case Things.Texas: return \\"Texas\\";
      case Things.String_1: return \\"1\\";
      case Things.Number_1: return 1;
      case Things.False: return false;
      case Things.TestTest: return \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\";
    }
    return null;
  }

  public static Things? ToThings(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return Things.Texas;
      case \\"1\\": return Things.String_1;
      case 1: return Things.Number_1;
      case false: return Things.False;
      case \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\": return Things.TestTest;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should render \`enum\` type with enums sharing same type 1`] = `
"public enum States {
  Texas, Alabama, California
}
public static class StatesExtensions {
  public static dynamic GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.Texas: return \\"Texas\\";
      case States.Alabama: return \\"Alabama\\";
      case States.California: return \\"California\\";
    }
    return null;
  }

  public static States? ToStates(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return States.Texas;
      case \\"Alabama\\": return States.Alabama;
      case \\"California\\": return States.California;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should render \`enum\` type with enums sharing same type 2`] = `
"public enum States {
  Texas, Alabama, California
}
public static class StatesExtensions {
  public static dynamic GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.Texas: return \\"Texas\\";
      case States.Alabama: return \\"Alabama\\";
      case States.California: return \\"California\\";
    }
    return null;
  }

  public static States? ToStates(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return States.Texas;
      case \\"Alabama\\": return States.Alabama;
      case \\"California\\": return States.California;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should render enums with translated special characters 1`] = `
"public enum States {
  TestPlus, Test, TestMinus, TestQuestionExclamation, AsteriskTest
}
public static class StatesExtensions {
  public static dynamic GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.TestPlus: return \\"test+\\";
      case States.Test: return \\"test\\";
      case States.TestMinus: return \\"test-\\";
      case States.TestQuestionExclamation: return \\"test?!\\";
      case States.AsteriskTest: return \\"*test\\";
    }
    return null;
  }

  public static States? ToStates(dynamic value)
  {
    switch (value)
    {
      case \\"test+\\": return States.TestPlus;
      case \\"test\\": return States.Test;
      case \\"test-\\": return States.TestMinus;
      case \\"test?!\\": return States.TestQuestionExclamation;
      case \\"*test\\": return States.AsteriskTest;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should render enums with translated special characters 2`] = `
"public enum States {
  TestPlus, Test, TestMinus, TestQuestionExclamation, AsteriskTest
}
public static class StatesExtensions {
  public static dynamic GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.TestPlus: return \\"test+\\";
      case States.Test: return \\"test\\";
      case States.TestMinus: return \\"test-\\";
      case States.TestQuestionExclamation: return \\"test?!\\";
      case States.AsteriskTest: return \\"*test\\";
    }
    return null;
  }

  public static States? ToStates(dynamic value)
  {
    switch (value)
    {
      case \\"test+\\": return States.TestPlus;
      case \\"test\\": return States.Test;
      case \\"test-\\": return States.TestMinus;
      case \\"test?!\\": return States.TestQuestionExclamation;
      case \\"*test\\": return States.AsteriskTest;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should render models and their dependencies 1`] = `
"namespace Test.Namespace
{
  using System.Collections.Generic;
  public class Address {
  private string streetName;
  private string city;
  private string state;
  private float? houseNumber;
  private bool? marriage;
  private dynamic members;
  private dynamic[] arrayType;
  private OtherModel otherModel;
  private Dictionary<string, dynamic> additionalProperties;
  private Dictionary<string, string> sTestPatternProperties;

  public string StreetName 
  {
    get { return streetName; }
    set { streetName = value; }
  }

  public string City 
  {
    get { return city; }
    set { city = value; }
  }

  public string State 
  {
    get { return state; }
    set { state = value; }
  }

  public float? HouseNumber 
  {
    get { return houseNumber; }
    set { houseNumber = value; }
  }

  public bool? Marriage 
  {
    get { return marriage; }
    set { marriage = value; }
  }

  public dynamic Members 
  {
    get { return members; }
    set { members = value; }
  }

  public dynamic[] ArrayType 
  {
    get { return arrayType; }
    set { arrayType = value; }
  }

  public OtherModel OtherModel 
  {
    get { return otherModel; }
    set { otherModel = value; }
  }

  public Dictionary<string, dynamic> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public Dictionary<string, string> STestPatternProperties 
  {
    get { return sTestPatternProperties; }
    set { sTestPatternProperties = value; }
  }
}
}"
`;

exports[`CSharpGenerator should render models and their dependencies 2`] = `
"namespace Test.Namespace
{
  using System.Collections.Generic;
  public class OtherModel {
  private string streetName;
  private Dictionary<string, dynamic> additionalProperties;

  public string StreetName 
  {
    get { return streetName; }
    set { streetName = value; }
  }

  public Dictionary<string, dynamic> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}
}"
`;

exports[`CSharpGenerator should work custom preset for \`enum\` type 1`] = `
"public enum CustomEnum {
  Texas, Alabama, California
}
public static class CustomEnumExtensions {
  public static dynamic GetValue(this CustomEnum enumValue)
  {
    switch (enumValue)
    {
      case CustomEnum.Texas: return \\"Texas\\";
      case CustomEnum.Alabama: return \\"Alabama\\";
      case CustomEnum.California: return \\"California\\";
    }
    return null;
  }

  public static CustomEnum? ToCustomEnum(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return CustomEnum.Texas;
      case \\"Alabama\\": return CustomEnum.Alabama;
      case \\"California\\": return CustomEnum.California;
    }
    return null;
  }
}

"
`;

exports[`CSharpGenerator should work custom preset for \`enum\` type 2`] = `
"public enum CustomEnum {
  Texas, Alabama, California
}
public static class CustomEnumExtensions {
  public static dynamic GetValue(this CustomEnum enumValue)
  {
    switch (enumValue)
    {
      case CustomEnum.Texas: return \\"Texas\\";
      case CustomEnum.Alabama: return \\"Alabama\\";
      case CustomEnum.California: return \\"California\\";
    }
    return null;
  }

  public static CustomEnum? ToCustomEnum(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return CustomEnum.Texas;
      case \\"Alabama\\": return CustomEnum.Alabama;
      case \\"California\\": return CustomEnum.California;
    }
    return null;
  }
}

"
`;
