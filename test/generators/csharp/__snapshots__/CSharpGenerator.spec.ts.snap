// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CSharpGenerator class renderer should be able to overwrite accessor preset hook 1`] = `
"public class CustomClass
{
  private string property;
  private Dictionary<string, string> additionalProperties;

  my own custom factory

  my own custom factory
}"
`;

exports[`CSharpGenerator class renderer should be able to overwrite property preset hook 1`] = `
"public class CustomClass
{
  my own property
  my own property

  public string Property 
  {
    get { return property; }
    set { property = value; }
  }

  public Dictionary<string, string> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`class\` type 1`] = `
"public class Address
{
  private string streetName;
  private string city;
  private string state;
  private double houseNumber;
  private bool marriage;
  private dynamic members;
  private dynamic[] tupleType;
  private dynamic[] arrayType;
  private Dictionary<string, string> additionalProperties;

  public string StreetName 
  {
    get { return streetName; }
    set { streetName = value; }
  }

  public string City 
  {
    get { return city; }
    set { city = value; }
  }

  public string State 
  {
    get { return state; }
    set { state = value; }
  }

  public double HouseNumber 
  {
    get { return houseNumber; }
    set { houseNumber = value; }
  }

  public bool Marriage 
  {
    get { return marriage; }
    set { marriage = value; }
  }

  public dynamic Members 
  {
    get { return members; }
    set { members = value; }
  }

  public dynamic[] TupleType 
  {
    get { return tupleType; }
    set { tupleType = value; }
  }

  public dynamic[] ArrayType 
  {
    get { return arrayType; }
    set { arrayType = value; }
  }

  public Dictionary<string, string> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`enum\` type with enums of mixed types 1`] = `
"public class Things
{
  
}"
`;

exports[`CSharpGenerator should render \`enum\` type with enums sharing same type 1`] = `
"public enum States
{
  QUOTATION_TEXAS_QUOTATION,
  QUOTATION_ALABAMA_QUOTATION,
  QUOTATION_CALIFORNIA_QUOTATION
}

public static class StatesExtensions
{
  public static dynamic GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.QUOTATION_TEXAS_QUOTATION: return \\"Texas\\";
      case States.QUOTATION_ALABAMA_QUOTATION: return \\"Alabama\\";
      case States.QUOTATION_CALIFORNIA_QUOTATION: return \\"California\\";
    }
    return null;
  }

  public static States? ToStates(dynamic value)
  {
    switch (value)
    {
      case \\"Texas\\": return States.QUOTATION_TEXAS_QUOTATION;
      case \\"Alabama\\": return States.QUOTATION_ALABAMA_QUOTATION;
      case \\"California\\": return States.QUOTATION_CALIFORNIA_QUOTATION;
    }
    return null;
  }
}
"
`;

exports[`CSharpGenerator should render enums with translated special characters 1`] = `
"public enum States
{
  QUOTATION_TEST_PLUS_QUOTATION,
  QUOTATION_TEST_QUOTATION,
  QUOTATION_TEST_MINUS_QUOTATION,
  QUOTATION_TEST_QUESTION_EXCLAMATION_QUOTATION,
  QUOTATION_ASTERISK_TEST_QUOTATION
}

public static class StatesExtensions
{
  public static dynamic GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.QUOTATION_TEST_PLUS_QUOTATION: return \\"test+\\";
      case States.QUOTATION_TEST_QUOTATION: return \\"test\\";
      case States.QUOTATION_TEST_MINUS_QUOTATION: return \\"test-\\";
      case States.QUOTATION_TEST_QUESTION_EXCLAMATION_QUOTATION: return \\"test?!\\";
      case States.QUOTATION_ASTERISK_TEST_QUOTATION: return \\"*test\\";
    }
    return null;
  }

  public static States? ToStates(dynamic value)
  {
    switch (value)
    {
      case \\"test+\\": return States.QUOTATION_TEST_PLUS_QUOTATION;
      case \\"test\\": return States.QUOTATION_TEST_QUOTATION;
      case \\"test-\\": return States.QUOTATION_TEST_MINUS_QUOTATION;
      case \\"test?!\\": return States.QUOTATION_TEST_QUESTION_EXCLAMATION_QUOTATION;
      case \\"*test\\": return States.QUOTATION_ASTERISK_TEST_QUOTATION;
    }
    return null;
  }
}
"
`;

exports[`CSharpGenerator should render models and their dependencies 1`] = `
"namespace Test.Namespace
{
  using System.Collections.Generic;

  public class Address
  {
    private string streetName;
    private string city;
    private string state;
    private double houseNumber;
    private bool marriage;
    private dynamic members;
    private dynamic[] arrayType;
    private OtherModel otherModel;
    private Dictionary<string, dynamic> additionalProperties;

    public string StreetName 
    {
      get { return streetName; }
      set { streetName = value; }
    }

    public string City 
    {
      get { return city; }
      set { city = value; }
    }

    public string State 
    {
      get { return state; }
      set { state = value; }
    }

    public double HouseNumber 
    {
      get { return houseNumber; }
      set { houseNumber = value; }
    }

    public bool Marriage 
    {
      get { return marriage; }
      set { marriage = value; }
    }

    public dynamic Members 
    {
      get { return members; }
      set { members = value; }
    }

    public dynamic[] ArrayType 
    {
      get { return arrayType; }
      set { arrayType = value; }
    }

    public OtherModel OtherModel 
    {
      get { return otherModel; }
      set { otherModel = value; }
    }

    public Dictionary<string, dynamic> AdditionalProperties 
    {
      get { return additionalProperties; }
      set { additionalProperties = value; }
    }
  }
}"
`;

exports[`CSharpGenerator should render models and their dependencies 2`] = `
"namespace Test.Namespace
{
  using System.Collections.Generic;

  public class OtherModel
  {
    private string streetName;
    private Dictionary<string, dynamic> additionalProperties;

    public string StreetName 
    {
      get { return streetName; }
      set { streetName = value; }
    }

    public Dictionary<string, dynamic> AdditionalProperties 
    {
      get { return additionalProperties; }
      set { additionalProperties = value; }
    }
  }
}"
`;
