// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CSharpGenerator class renderer should be able to overwrite accessor preset hook 1`] = `
"public class CustomClass
{
  private string? property;
  private Dictionary<string, string>? additionalProperties;

  my own custom factory

  my own custom factory
}"
`;

exports[`CSharpGenerator class renderer should be able to overwrite property preset hook 1`] = `
"public class CustomClass
{
  my own property
  my own property

  public string? Property 
  {
    get { return property; }
    set { property = value; }
  }

  public Dictionary<string, string>? AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`class\` type 1`] = `
"public class Address
{
  private string streetName;
  private string city;
  private string state;
  private double houseNumber;
  private bool? marriage;
  private dynamic? members;
  private dynamic[]? tupleType;
  private dynamic[] arrayType;
  private Dictionary<string, dynamic>? additionalProperties;

  public string StreetName 
  {
    get { return streetName; }
    set { streetName = value; }
  }

  public string City 
  {
    get { return city; }
    set { city = value; }
  }

  public string State 
  {
    get { return state; }
    set { state = value; }
  }

  public double HouseNumber 
  {
    get { return houseNumber; }
    set { houseNumber = value; }
  }

  public bool? Marriage 
  {
    get { return marriage; }
    set { marriage = value; }
  }

  public dynamic? Members 
  {
    get { return members; }
    set { members = value; }
  }

  public dynamic[]? TupleType 
  {
    get { return tupleType; }
    set { tupleType = value; }
  }

  public dynamic[] ArrayType 
  {
    get { return arrayType; }
    set { arrayType = value; }
  }

  public Dictionary<string, dynamic>? AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}"
`;

exports[`CSharpGenerator should render \`enum\` type 1`] = `
"public enum Things
{
  TEXAS,
  NUMBER_1,
  RESERVED_NUMBER_1,
  RESERVED_FALSE,
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT
}

public static class ThingsExtensions
{
  public static dynamic? GetValue(this Things enumValue)
  {
    switch (enumValue)
    {
      case Things.TEXAS: return \\"Texas\\";
      case Things.NUMBER_1: return \\"1\\";
      case Things.RESERVED_NUMBER_1: return 1;
      case Things.RESERVED_FALSE: return false;
      case Things.CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT: return \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\";
    }
    return null;
  }

  public static Things? ToThings(dynamic? value)
  {
    switch (value)
    {
      case \\"Texas\\": return Things.TEXAS;
      case \\"1\\": return Things.NUMBER_1;
      case 1: return Things.RESERVED_NUMBER_1;
      case false: return Things.RESERVED_FALSE;
      case \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\": return Things.CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT;
    }
    return null;
  }
}
"
`;

exports[`CSharpGenerator should render \`record\` type if chosen 1`] = `
"public record Address
{
  public required string StreetName { get; init; }
  public required string City { get; init; }
  public required string State { get; init; }
  public required double HouseNumber { get; init; }
  public bool? Marriage { get; init; }
  public dynamic? Members { get; init; }
  public dynamic[]? TupleType { get; init; }
  public required dynamic[] ArrayType { get; init; }
  public Dictionary<string, dynamic>? AdditionalProperties { get; init; }
}"
`;

exports[`CSharpGenerator should render enums with translated special characters 1`] = `
"public enum States
{
  TEST_PLUS,
  TEST,
  TEST_MINUS,
  TEST_QUESTION_EXCLAMATION,
  ASTERISK_TEST
}

public static class StatesExtensions
{
  public static string? GetValue(this States enumValue)
  {
    switch (enumValue)
    {
      case States.TEST_PLUS: return \\"test+\\";
      case States.TEST: return \\"test\\";
      case States.TEST_MINUS: return \\"test-\\";
      case States.TEST_QUESTION_EXCLAMATION: return \\"test?!\\";
      case States.ASTERISK_TEST: return \\"*test\\";
    }
    return null;
  }

  public static States? ToStates(string? value)
  {
    switch (value)
    {
      case \\"test+\\": return States.TEST_PLUS;
      case \\"test\\": return States.TEST;
      case \\"test-\\": return States.TEST_MINUS;
      case \\"test?!\\": return States.TEST_QUESTION_EXCLAMATION;
      case \\"*test\\": return States.ASTERISK_TEST;
    }
    return null;
  }
}
"
`;

exports[`CSharpGenerator should render models and their dependencies 1`] = `
"namespace Test.Namespace
{
  using System.Collections.Generic;

  public class Address
  {
    private string streetName;
    private string city;
    private string state;
    private double houseNumber;
    private bool? marriage;
    private dynamic? members;
    private dynamic[] arrayType;
    private OtherModel? otherModel;
    private Dictionary<string, dynamic>? additionalProperties;

    public string StreetName 
    {
      get { return streetName; }
      set { streetName = value; }
    }

    public string City 
    {
      get { return city; }
      set { city = value; }
    }

    public string State 
    {
      get { return state; }
      set { state = value; }
    }

    public double HouseNumber 
    {
      get { return houseNumber; }
      set { houseNumber = value; }
    }

    public bool? Marriage 
    {
      get { return marriage; }
      set { marriage = value; }
    }

    public dynamic? Members 
    {
      get { return members; }
      set { members = value; }
    }

    public dynamic[] ArrayType 
    {
      get { return arrayType; }
      set { arrayType = value; }
    }

    public OtherModel? OtherModel 
    {
      get { return otherModel; }
      set { otherModel = value; }
    }

    public Dictionary<string, dynamic>? AdditionalProperties 
    {
      get { return additionalProperties; }
      set { additionalProperties = value; }
    }
  }
}"
`;

exports[`CSharpGenerator should render models and their dependencies 2`] = `
"namespace Test.Namespace
{
  using System.Collections.Generic;

  public class OtherModel
  {
    private string? streetName;
    private Dictionary<string, dynamic>? additionalProperties;

    public string? StreetName 
    {
      get { return streetName; }
      set { streetName = value; }
    }

    public Dictionary<string, dynamic>? AdditionalProperties 
    {
      get { return additionalProperties; }
      set { additionalProperties = value; }
    }
  }
}"
`;
