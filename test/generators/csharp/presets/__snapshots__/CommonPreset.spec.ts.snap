// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CSHARP_COMMON_PRESET should render Equals support function 1`] = `
"public partial class Test
{
  private string stringProp;
  private double? numberProp;
  private NestedTest? objectProp;
  private Dictionary<string, dynamic>? additionalProperties;

  public string StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public double? NumberProp 
  {
    get { return numberProp; }
    set { numberProp = value; }
  }

  public NestedTest? ObjectProp 
  {
    get { return objectProp; }
    set { objectProp = value; }
  }

  public Dictionary<string, dynamic>? AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public override bool Equals(object obj)
  {
    if(obj is Test model)
    {
      if(ReferenceEquals(this, model)) { return true; }
      return StringProp == model.StringProp && 
      NumberProp == model.NumberProp && 
      ObjectProp == model.ObjectProp && 
      AdditionalProperties == model.AdditionalProperties;
    }

    return false;
  }

  public override int GetHashCode()
  {
    HashCode hash = new HashCode();
    hash.Add(StringProp);
    hash.Add(NumberProp);
    hash.Add(ObjectProp);
    hash.Add(AdditionalProperties);
    return hash.ToHashCode();
  }
}"
`;

exports[`CSHARP_COMMON_PRESET should render Equals support function 2`] = `
"public partial class NestedTest
{
  private string? stringProp;
  private Dictionary<string, dynamic>? additionalProperties;

  public string? StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public Dictionary<string, dynamic>? AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public override bool Equals(object obj)
  {
    if(obj is NestedTest model)
    {
      if(ReferenceEquals(this, model)) { return true; }
      return StringProp == model.StringProp && 
      AdditionalProperties == model.AdditionalProperties;
    }

    return false;
  }

  public override int GetHashCode()
  {
    HashCode hash = new HashCode();
    hash.Add(StringProp);
    hash.Add(AdditionalProperties);
    return hash.ToHashCode();
  }
}"
`;

exports[`CSHARP_COMMON_PRESET should render GetHashCode support function 1`] = `
"public partial class Test
{
  private string stringProp;
  private double? numberProp;
  private NestedTest? objectProp;
  private Dictionary<string, dynamic>? additionalProperties;

  public string StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public double? NumberProp 
  {
    get { return numberProp; }
    set { numberProp = value; }
  }

  public NestedTest? ObjectProp 
  {
    get { return objectProp; }
    set { objectProp = value; }
  }

  public Dictionary<string, dynamic>? AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public override int GetHashCode()
  {
    HashCode hash = new HashCode();
    hash.Add(StringProp);
    hash.Add(NumberProp);
    hash.Add(ObjectProp);
    hash.Add(AdditionalProperties);
    return hash.ToHashCode();
  }
}"
`;

exports[`CSHARP_COMMON_PRESET should render GetHashCode support function 2`] = `
"public partial class NestedTest
{
  private string? stringProp;
  private Dictionary<string, dynamic>? additionalProperties;

  public string? StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public Dictionary<string, dynamic>? AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public override int GetHashCode()
  {
    HashCode hash = new HashCode();
    hash.Add(StringProp);
    hash.Add(AdditionalProperties);
    return hash.ToHashCode();
  }
}"
`;
