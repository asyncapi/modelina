// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JSON serializer preset should render serialize and deserialize converters 1`] = `
"[JsonConverter(typeof(TestConverter))]
public class Test {
  private string stringProp;
  private float? numberProp;
  private NestedTest objectProp;
  private Dictionary<string, dynamic> additionalProperties;
  private Dictionary<string, string> sTestPatternProperties;

  public string StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public float? NumberProp 
  {
    get { return numberProp; }
    set { numberProp = value; }
  }

  public NestedTest ObjectProp 
  {
    get { return objectProp; }
    set { objectProp = value; }
  }

  public Dictionary<string, dynamic> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }

  public Dictionary<string, string> STestPatternProperties 
  {
    get { return sTestPatternProperties; }
    set { sTestPatternProperties = value; }
  }
}

internal class TestConverter : JsonConverter<Test>
{
  public override bool CanConvert(Type objectType)
  {
    // this converter can be applied to any type
    return true;
  }
  public override Test Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
  {
    if (reader.TokenType != JsonTokenType.StartObject)
    {
      throw new JsonException();
    }

    var instance = new Test();
  
    while (reader.Read())
    {
      if (reader.TokenType == JsonTokenType.EndObject)
      {
        return instance;
      }

      // Get the key.
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      string propertyName = reader.GetString();
      if (propertyName == \\"string prop\\")
      {
        var value = JsonSerializer.Deserialize<string>(ref reader, options);
        instance.StringProp = value;
        continue;
      }
      if (propertyName == \\"numberProp\\")
      {
        var value = JsonSerializer.Deserialize<float?>(ref reader, options);
        instance.NumberProp = value;
        continue;
      }
      if (propertyName == \\"objectProp\\")
      {
        var value = JsonSerializer.Deserialize<NestedTest>(ref reader, options);
        instance.ObjectProp = value;
        continue;
      }

      if(instance.STestPatternProperties == null) { instance.STestPatternProperties = new Dictionary<string, string>(); }
      var match = Regex.Match(propertyName, @\\"^S(.?)test\\");
      if (match.Success)
      {
        var deserializedValue = JsonSerializer.Deserialize<string>(ref reader, options);
        instance.STestPatternProperties.Add(propertyName, deserializedValue);
        continue;
      }

      if(instance.AdditionalProperties == null) { instance.AdditionalProperties = new Dictionary<string, dynamic>(); }
      var deserializedValue = JsonSerializer.Deserialize<dynamic>(ref reader, options);
      instance.AdditionalProperties.Add(propertyName, deserializedValue);
      continue;
    }
  
    throw new JsonException();
  }
  public override void Write(Utf8JsonWriter writer, Test value, JsonSerializerOptions options)
  {
    if (value == null)
    {
      JsonSerializer.Serialize(writer, null);
      return;
    }
    var properties = value.GetType().GetProperties().Where(prop => prop.Name != \\"AdditionalProperties\\" && prop.Name != \\"STestPatternProperties\\");
  
    writer.WriteStartObject();

    if(value.StringProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"string prop\\");
      JsonSerializer.Serialize(writer, value.StringProp);
    }
    if(value.NumberProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"numberProp\\");
      JsonSerializer.Serialize(writer, value.NumberProp);
    }
    if(value.ObjectProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"objectProp\\");
      JsonSerializer.Serialize(writer, value.ObjectProp);
    }


    // Unwrap pattern properties in object
    if(value.STestPatternProperties != null) { 
      foreach (var patternProp in value.STestPatternProperties)
      {
        //Ignore any pattern properties which might already be part of the core properties
        if (properties.Any(prop => prop.Name == patternProp.Key))
        {
            continue;
        }
        // write property name and let the serializer serialize the value itself
        writer.WritePropertyName(patternProp.Key);
        JsonSerializer.Serialize(writer, patternProp.Value);
      }
    }

    // Unwrap additional properties in object
    if (value.AdditionalProperties != null) {
      foreach (var additionalProperty in value.AdditionalProperties)
      {
        //Ignore any additional properties which might already be part of the core properties
        if (properties.Any(prop => prop.Name == additionalProperty.Key))
        {
            continue;
        }
        // write property name and let the serializer serialize the value itself
        writer.WritePropertyName(additionalProperty.Key);
        JsonSerializer.Serialize(writer, additionalProperty.Value);
      }
    }

    writer.WriteEndObject();
  }

}
"
`;

exports[`JSON serializer preset should render serialize and deserialize converters 2`] = `
"[JsonConverter(typeof(NestedTestConverter))]
public class NestedTest {
  private string stringProp;
  private Dictionary<string, dynamic> additionalProperties;

  public string StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public Dictionary<string, dynamic> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}

internal class NestedTestConverter : JsonConverter<NestedTest>
{
  public override bool CanConvert(Type objectType)
  {
    // this converter can be applied to any type
    return true;
  }
  public override NestedTest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
  {
    if (reader.TokenType != JsonTokenType.StartObject)
    {
      throw new JsonException();
    }

    var instance = new NestedTest();
  
    while (reader.Read())
    {
      if (reader.TokenType == JsonTokenType.EndObject)
      {
        return instance;
      }

      // Get the key.
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      string propertyName = reader.GetString();
      if (propertyName == \\"stringProp\\")
      {
        var value = JsonSerializer.Deserialize<string>(ref reader, options);
        instance.StringProp = value;
        continue;
      }

    

      if(instance.AdditionalProperties == null) { instance.AdditionalProperties = new Dictionary<string, dynamic>(); }
      var deserializedValue = JsonSerializer.Deserialize<dynamic>(ref reader, options);
      instance.AdditionalProperties.Add(propertyName, deserializedValue);
      continue;
    }
  
    throw new JsonException();
  }
  public override void Write(Utf8JsonWriter writer, NestedTest value, JsonSerializerOptions options)
  {
    if (value == null)
    {
      JsonSerializer.Serialize(writer, null);
      return;
    }
    var properties = value.GetType().GetProperties().Where(prop => prop.Name != \\"AdditionalProperties\\");
  
    writer.WriteStartObject();

    if(value.StringProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"stringProp\\");
      JsonSerializer.Serialize(writer, value.StringProp);
    }


  

    // Unwrap additional properties in object
    if (value.AdditionalProperties != null) {
      foreach (var additionalProperty in value.AdditionalProperties)
      {
        //Ignore any additional properties which might already be part of the core properties
        if (properties.Any(prop => prop.Name == additionalProperty.Key))
        {
            continue;
        }
        // write property name and let the serializer serialize the value itself
        writer.WritePropertyName(additionalProperty.Key);
        JsonSerializer.Serialize(writer, additionalProperty.Value);
      }
    }

    writer.WriteEndObject();
  }

}
"
`;
