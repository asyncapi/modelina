// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JSON serializer preset should render serialize and deserialize converters 1`] = `
"[JsonConverter(typeof(TestConverter))]
public class Test
{
  private string stringProp;
  private double numberProp;
  private EnumTest enumProp;
  private NestedTest objectProp;
  private Dictionary<string, dynamic> additionalProperties;

  public string StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public double NumberProp 
  {
    get { return numberProp; }
    set { numberProp = value; }
  }

  public EnumTest EnumProp 
  {
    get { return enumProp; }
    set { enumProp = value; }
  }

  public NestedTest ObjectProp 
  {
    get { return objectProp; }
    set { objectProp = value; }
  }

  public Dictionary<string, dynamic> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}

internal class TestConverter : JsonConverter<Test>
{
  public override bool CanConvert(System.Type objectType)
  {
    // this converter can be applied to any type
    return true;
  }
  public override Test Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
  {
    if (reader.TokenType != JsonTokenType.StartObject)
    {
      throw new JsonException();
    }

    var instance = new Test();
  
    while (reader.Read())
    {
      if (reader.TokenType == JsonTokenType.EndObject)
      {
        return instance;
      }

      // Get the key.
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      string propertyName = reader.GetString();
      if (propertyName == \\"stringProp\\")
        {
          var value = JsonSerializer.Deserialize<string>(ref reader, options);
          instance.stringProp = value;
          continue;
        }
      if (propertyName == \\"numberProp\\")
        {
          var value = JsonSerializer.Deserialize<double>(ref reader, options);
          instance.numberProp = value;
          continue;
        }
      if (propertyName == \\"enumProp\\")
        {
          var value = EnumTestExtension.ToEnumTest(JsonSerializer.Deserialize<dynamic>(ref reader, options));
          instance.enumProp = value;
          continue;
        }
      if (propertyName == \\"objectProp\\")
        {
          var value = JsonSerializer.Deserialize<NestedTest>(ref reader, options);
          instance.objectProp = value;
          continue;
        }
      if(instance.additionalProperties == null) { instance.additionalProperties = new Dictionary<string, string>(); }
            var deserializedValue = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(ref reader, options);
            instance.additionalProperties.Add(propertyName, deserializedValue);
            continue;
    }
  
    throw new JsonException();
  }
  public override void Write(Utf8JsonWriter writer, Test value, JsonSerializerOptions options)
  {
    if (value == null)
    {
      JsonSerializer.Serialize(writer, null, options);
      return;
    }
    var properties = value.GetType().GetProperties().Where(prop => additionalProperties);
  
    writer.WriteStartObject();

    if(value.stringProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"stringProp\\");
      JsonSerializer.Serialize(writer, value.stringProp, options);
    }
    if(value.numberProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"numberProp\\");
      JsonSerializer.Serialize(writer, value.numberProp, options);
    }
    if(value.enumProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"enumProp\\");
      JsonSerializer.Serialize(writer, EnumTest.GetValue(), options);
    }
    if(value.objectProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"objectProp\\");
      JsonSerializer.Serialize(writer, value.objectProp, options);
    }
    // Unwrap dictionary properties
    if (value.additionalProperties != null) {
      foreach (var unwrappedProperty in value.additionalProperties)
      {
        // Ignore any unwrapped properties which might already be part of the core properties
        if (properties.Any(prop => prop.Name == unwrappedProperty.Key))
        {
            continue;
        }
        // Write property name and let the serializer serialize the value itself
        writer.WritePropertyName(unwrappedProperty.Key);
        JsonSerializer.Serialize(writer, unwrappedProperty.Value, options);
      }
    }if(value.additionalProperties != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"additionalProperties\\");
      JsonSerializer.Serialize(writer, value.additionalProperties, options);
    }


    writer.WriteEndObject();
  }

}
"
`;

exports[`JSON serializer preset should render serialize and deserialize converters 2`] = `
"public enum EnumTest
{
  SOME_SPACE_ENUM_SPACE_STRING,
  RESERVED_TRUE,
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT,
  NUMBER_2
}

public static class EnumTestExtensions
{
  public static dynamic GetValue(this EnumTest enumValue)
  {
    switch (enumValue)
    {
      case EnumTest.SOME_SPACE_ENUM_SPACE_STRING: return \\"Some enum String\\";
      case EnumTest.RESERVED_TRUE: return true;
      case EnumTest.CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT: return \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\";
      case EnumTest.NUMBER_2: return 2;
    }
    return null;
  }

  public static EnumTest? ToEnumTest(dynamic value)
  {
    switch (value)
    {
      case \\"Some enum String\\": return EnumTest.SOME_SPACE_ENUM_SPACE_STRING;
      case true: return EnumTest.RESERVED_TRUE;
      case \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\": return EnumTest.CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT;
      case 2: return EnumTest.NUMBER_2;
    }
    return null;
  }
}
"
`;

exports[`JSON serializer preset should render serialize and deserialize converters 3`] = `
"[JsonConverter(typeof(NestedTestConverter))]
public class NestedTest
{
  private string stringProp;
  private Dictionary<string, dynamic> additionalProperties;

  public string StringProp 
  {
    get { return stringProp; }
    set { stringProp = value; }
  }

  public Dictionary<string, dynamic> AdditionalProperties 
  {
    get { return additionalProperties; }
    set { additionalProperties = value; }
  }
}

internal class NestedTestConverter : JsonConverter<NestedTest>
{
  public override bool CanConvert(System.Type objectType)
  {
    // this converter can be applied to any type
    return true;
  }
  public override NestedTest Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
  {
    if (reader.TokenType != JsonTokenType.StartObject)
    {
      throw new JsonException();
    }

    var instance = new NestedTest();
  
    while (reader.Read())
    {
      if (reader.TokenType == JsonTokenType.EndObject)
      {
        return instance;
      }

      // Get the key.
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      string propertyName = reader.GetString();
      if (propertyName == \\"stringProp\\")
        {
          var value = JsonSerializer.Deserialize<string>(ref reader, options);
          instance.stringProp = value;
          continue;
        }
      if(instance.additionalProperties == null) { instance.additionalProperties = new Dictionary<string, string>(); }
            var deserializedValue = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(ref reader, options);
            instance.additionalProperties.Add(propertyName, deserializedValue);
            continue;
    }
  
    throw new JsonException();
  }
  public override void Write(Utf8JsonWriter writer, NestedTest value, JsonSerializerOptions options)
  {
    if (value == null)
    {
      JsonSerializer.Serialize(writer, null, options);
      return;
    }
    var properties = value.GetType().GetProperties().Where(prop => additionalProperties);
  
    writer.WriteStartObject();

    if(value.stringProp != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"stringProp\\");
      JsonSerializer.Serialize(writer, value.stringProp, options);
    }
    // Unwrap dictionary properties
    if (value.additionalProperties != null) {
      foreach (var unwrappedProperty in value.additionalProperties)
      {
        // Ignore any unwrapped properties which might already be part of the core properties
        if (properties.Any(prop => prop.Name == unwrappedProperty.Key))
        {
            continue;
        }
        // Write property name and let the serializer serialize the value itself
        writer.WritePropertyName(unwrappedProperty.Key);
        JsonSerializer.Serialize(writer, unwrappedProperty.Value, options);
      }
    }if(value.additionalProperties != null) { 
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"additionalProperties\\");
      JsonSerializer.Serialize(writer, value.additionalProperties, options);
    }


    writer.WriteEndObject();
  }

}
"
`;
