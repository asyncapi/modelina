// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Marshalling preset should render un/marshal code 1`] = `
"class Test {
  stringProp;
  numberProp;
  objectProp;
  additionalProperties;
  sTestPatternProperties;
  sAnotherTestPatternProperties;

  constructor(input) {
    this.stringProp = input.stringProp;
    if (input.hasOwnProperty('numberProp')) {
      this.numberProp = input.numberProp;
    }
    if (input.hasOwnProperty('objectProp')) {
      this.objectProp = input.objectProp;
    }
  }

  get stringProp() { return this.stringProp; }
  set stringProp(stringProp) { this.stringProp = stringProp; }

  get numberProp() { return this.numberProp; }
  set numberProp(numberProp) { this.numberProp = numberProp; }

  get objectProp() { return this.objectProp; }
  set objectProp(objectProp) { this.objectProp = objectProp; }

  get additionalProperties() { return this.additionalProperties; }
  set additionalProperties(additionalProperties) { this.additionalProperties = additionalProperties; }

  get sTestPatternProperties() { return this.sTestPatternProperties; }
  set sTestPatternProperties(sTestPatternProperties) { this.sTestPatternProperties = sTestPatternProperties; }

  get sAnotherTestPatternProperties() { return this.sAnotherTestPatternProperties; }
  set sAnotherTestPatternProperties(sAnotherTestPatternProperties) { this.sAnotherTestPatternProperties = sAnotherTestPatternProperties; }

  marshal(){
    let json = '{'
    if(this.stringProp !== undefined) {
      json += \`\\"string prop\\": \${typeof this.stringProp === 'number' || typeof this.stringProp === 'boolean' ? this.stringProp : JSON.stringify(this.stringProp)},\`; 
    }
    if(this.numberProp !== undefined) {
      json += \`\\"numberProp\\": \${typeof this.numberProp === 'number' || typeof this.numberProp === 'boolean' ? this.numberProp : JSON.stringify(this.numberProp)},\`; 
    }
    if(this.objectProp !== undefined) {
      json += \`\\"objectProp\\": \${this.objectProp.marshal()},\`; 
    }
    if(this.sTestPatternProperties !== undefined) { 
      for (const [key, value] of this.sTestPatternProperties.entries()) {
        //Only render pattern properties which are not already a property
        if(Object.keys(this).includes(String(key))) continue;
        json += \`\\"\${key}\\": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
      }
    }if(this.sAnotherTestPatternProperties !== undefined) { 
      for (const [key, value] of this.sAnotherTestPatternProperties.entries()) {
        //Only render pattern properties which are not already a property
        if(Object.keys(this).includes(String(key))) continue;
        json += \`\\"\${key}\\": \${value.marshal()},\`;
      }
    }
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only render additionalProperties which are not already a property
        if(Object.keys(this).includes(String(key))) continue;
        json += \`\\"\${key}\\": \${value.marshal()},\`;
      }
    }

    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  unmarshal(json){
    const obj = typeof json === \\"object\\" ? json : JSON.parse(json);
    const instance = new Test({});

    if (obj[\\"string prop\\"] !== undefined) {
      instance.stringProp = obj[\\"string prop\\"];
    }
    if (obj[\\"numberProp\\"] !== undefined) {
      instance.numberProp = obj[\\"numberProp\\"];
    }
    if (obj[\\"objectProp\\"] !== undefined) {
      instance.objectProp = NestedTest.unmarshal(obj[\\"objectProp\\"]);
    }

    //Not part of core properties
    if (instance.sTestPatternProperties === undefined) {instance.sTestPatternProperties = new Map();}
  if (instance.sAnotherTestPatternProperties === undefined) {instance.sAnotherTestPatternProperties = new Map();}

    if (instance.additionalProperties === undefined) {instance.additionalProperties = new Map();}
    for (const [key, value] of Object.entries(obj).filter((([key,]) => {return ![\\"string prop\\",\\"numberProp\\",\\"objectProp\\"].includes(key);}))) {
      //Check all pattern properties
      if (key.match(new RegExp('^S(.?)test'))) {
        instance.sTestPatternProperties.set(key, value);
        continue;
      }//Check all pattern properties
      if (key.match(new RegExp('^S(.?)AnotherTest'))) {
        instance.sAnotherTestPatternProperties.set(key, NestedTest.unmarshal(value));
        continue;
      }
      instance.additionalProperties.set(key, NestedTest.unmarshal(value));
    }
    return instance;
  }
}"
`;

exports[`Marshalling preset should render un/marshal code 2`] = `
"class NestedTest {
  stringProp;
  additionalProperties;

  constructor(input) {
    if (input.hasOwnProperty('stringProp')) {
      this.stringProp = input.stringProp;
    }
  }

  get stringProp() { return this.stringProp; }
  set stringProp(stringProp) { this.stringProp = stringProp; }

  get additionalProperties() { return this.additionalProperties; }
  set additionalProperties(additionalProperties) { this.additionalProperties = additionalProperties; }

  marshal(){
    let json = '{'
    if(this.stringProp !== undefined) {
      json += \`\\"stringProp\\": \${typeof this.stringProp === 'number' || typeof this.stringProp === 'boolean' ? this.stringProp : JSON.stringify(this.stringProp)},\`; 
    }
  
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only render additionalProperties which are not already a property
        if(Object.keys(this).includes(String(key))) continue;
        json += \`\\"\${key}\\": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
      }
    }

    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  unmarshal(json){
    const obj = typeof json === \\"object\\" ? json : JSON.parse(json);
    const instance = new NestedTest({});

    if (obj[\\"stringProp\\"] !== undefined) {
      instance.stringProp = obj[\\"stringProp\\"];
    }

    //Not part of core properties
  
    if (instance.additionalProperties === undefined) {instance.additionalProperties = new Map();}
    for (const [key, value] of Object.entries(obj).filter((([key,]) => {return ![\\"stringProp\\"].includes(key);}))) {
    
      instance.additionalProperties.set(key, value);
    }
    return instance;
  }
}"
`;
