// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JavaGenerator oneOf/discriminator should create an interface 1`] = `
Array [
  "/**
 * Vehicle represents a union of types: Car, Truck
 */
public interface Vehicle {
  VehicleType getVehicleType();
}",
  "public class Car implements Vehicle {
  private final VehicleType vehicleType = VehicleType.CAR;
  private Map<String, Object> additionalProperties;

  public VehicleType getVehicleType() { return this.vehicleType; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }
}",
  "public enum VehicleType {
  CAR((String)\\"Car\\"), TRUCK((String)\\"Truck\\");

  private String value;

  VehicleType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static VehicleType fromValue(String value) {
    for (VehicleType e : VehicleType.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}",
  "public class Truck implements Vehicle {
  private final VehicleType vehicleType = VehicleType.TRUCK;
  private Map<String, Object> additionalProperties;

  public VehicleType getVehicleType() { return this.vehicleType; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }
}",
]
`;

exports[`JavaGenerator oneOf/discriminator with jackson preset handle allOf with const in CloudEvent type 1`] = `
Array [
  "@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXISTING_PROPERTY, property=\\"type\\", visible=true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Dog.class, name = \\"Dog\\"),
  @JsonSubTypes.Type(value = Cat.class, name = \\"Cat\\")
})
/**
 * Pet represents a union of types: Dog, Cat
 */
public interface Pet {
  CloudEventType getType();
}",
  "public class Dog implements Pet {
  @NotNull
  @JsonProperty(\\"id\\")
  private String id;
  @NotNull
  @JsonProperty(\\"source\\")
  private String source;
  @NotNull
  @JsonProperty(\\"specversion\\")
  private final String specversion = \\"1.0\\";
  @NotNull
  @JsonProperty(\\"type\\")
  private final CloudEventType type = CloudEventType.DOG;
  @JsonProperty(\\"dataschema\\")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private String dataschema;
  @JsonProperty(\\"time\\")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private java.time.OffsetDateTime time;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public String getId() { return this.id; }
  public void setId(String id) { this.id = id; }

  public String getSource() { return this.source; }
  public void setSource(String source) { this.source = source; }

  public String getSpecversion() { return this.specversion; }

  public CloudEventType getType() { return this.type; }

  public String getDataschema() { return this.dataschema; }
  public void setDataschema(String dataschema) { this.dataschema = dataschema; }

  public java.time.OffsetDateTime getTime() { return this.time; }
  public void setTime(java.time.OffsetDateTime time) { this.time = time; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dog self = (Dog) o;
      return 
        Objects.equals(this.id, self.id) &&
        Objects.equals(this.source, self.source) &&
        Objects.equals(this.specversion, self.specversion) &&
        Objects.equals(this.type, self.type) &&
        Objects.equals(this.dataschema, self.dataschema) &&
        Objects.equals(this.time, self.time) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)id, (Object)source, (Object)specversion, (Object)type, (Object)dataschema, (Object)time, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Dog {\\\\n\\" +   
      \\"    id: \\" + toIndentedString(id) + \\"\\\\n\\" +
      \\"    source: \\" + toIndentedString(source) + \\"\\\\n\\" +
      \\"    specversion: \\" + toIndentedString(specversion) + \\"\\\\n\\" +
      \\"    type: \\" + toIndentedString(type) + \\"\\\\n\\" +
      \\"    dataschema: \\" + toIndentedString(dataschema) + \\"\\\\n\\" +
      \\"    time: \\" + toIndentedString(time) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
  "public enum CloudEventType {
  DOG((String)\\"Dog\\"), CAT((String)\\"Cat\\");

  private String value;

  CloudEventType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @JsonCreator
  public static CloudEventType fromValue(String value) {
    for (CloudEventType e : CloudEventType.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}",
  "public class Cat implements Pet {
  @NotNull
  @JsonProperty(\\"id\\")
  private String id;
  @NotNull
  @JsonProperty(\\"source\\")
  private String source;
  @NotNull
  @JsonProperty(\\"specversion\\")
  private final String specversion = \\"1.0\\";
  @NotNull
  @JsonProperty(\\"type\\")
  private final CloudEventType type = CloudEventType.CAT;
  @JsonProperty(\\"dataschema\\")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private String dataschema;
  @JsonProperty(\\"time\\")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private java.time.OffsetDateTime time;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public String getId() { return this.id; }
  public void setId(String id) { this.id = id; }

  public String getSource() { return this.source; }
  public void setSource(String source) { this.source = source; }

  public String getSpecversion() { return this.specversion; }

  public CloudEventType getType() { return this.type; }

  public String getDataschema() { return this.dataschema; }
  public void setDataschema(String dataschema) { this.dataschema = dataschema; }

  public java.time.OffsetDateTime getTime() { return this.time; }
  public void setTime(java.time.OffsetDateTime time) { this.time = time; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cat self = (Cat) o;
      return 
        Objects.equals(this.id, self.id) &&
        Objects.equals(this.source, self.source) &&
        Objects.equals(this.specversion, self.specversion) &&
        Objects.equals(this.type, self.type) &&
        Objects.equals(this.dataschema, self.dataschema) &&
        Objects.equals(this.time, self.time) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)id, (Object)source, (Object)specversion, (Object)type, (Object)dataschema, (Object)time, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Cat {\\\\n\\" +   
      \\"    id: \\" + toIndentedString(id) + \\"\\\\n\\" +
      \\"    source: \\" + toIndentedString(source) + \\"\\\\n\\" +
      \\"    specversion: \\" + toIndentedString(specversion) + \\"\\\\n\\" +
      \\"    type: \\" + toIndentedString(type) + \\"\\\\n\\" +
      \\"    dataschema: \\" + toIndentedString(dataschema) + \\"\\\\n\\" +
      \\"    time: \\" + toIndentedString(time) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
]
`;

exports[`JavaGenerator oneOf/discriminator with jackson preset handle one const with discriminator 1`] = `
Array [
  "public class Dog {
  @NotNull
  @JsonProperty(\\"id\\")
  private String id;
  @NotNull
  @JsonProperty(\\"type\\")
  private final CloudEventType type = CloudEventType.DOG;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public String getId() { return this.id; }
  public void setId(String id) { this.id = id; }

  public CloudEventType getType() { return this.type; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dog self = (Dog) o;
      return 
        Objects.equals(this.id, self.id) &&
        Objects.equals(this.type, self.type) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)id, (Object)type, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Dog {\\\\n\\" +   
      \\"    id: \\" + toIndentedString(id) + \\"\\\\n\\" +
      \\"    type: \\" + toIndentedString(type) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
  "public enum CloudEventType {
  DOG((String)\\"Dog\\");

  private String value;

  CloudEventType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @JsonCreator
  public static CloudEventType fromValue(String value) {
    for (CloudEventType e : CloudEventType.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}",
]
`;

exports[`JavaGenerator oneOf/discriminator with jackson preset handle setting title with const 1`] = `
Array [
  "@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXISTING_PROPERTY, property=\\"type\\", visible=true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Dog.class, name = \\"Dog\\"),
  @JsonSubTypes.Type(value = Cat.class, name = \\"Cat\\")
})
/**
 * Pet represents a union of types: Dog, Cat
 */
public interface Pet {
  
}",
  "public class Dog implements Pet {
  @NotNull
  @JsonProperty(\\"type\\")
  private final DogType type = DogType.DOG;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public DogType getType() { return this.type; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dog self = (Dog) o;
      return 
        Objects.equals(this.type, self.type) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)type, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Dog {\\\\n\\" +   
      \\"    type: \\" + toIndentedString(type) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
  "public enum DogType {
  DOG((String)\\"Dog\\");

  private String value;

  DogType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @JsonCreator
  public static DogType fromValue(String value) {
    for (DogType e : DogType.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}",
  "public class Cat implements Pet {
  @NotNull
  @JsonProperty(\\"type\\")
  private final CatType type = CatType.CAT;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public CatType getType() { return this.type; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cat self = (Cat) o;
      return 
        Objects.equals(this.type, self.type) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)type, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Cat {\\\\n\\" +   
      \\"    type: \\" + toIndentedString(type) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
  "public enum CatType {
  CAT((String)\\"Cat\\");

  private String value;

  CatType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @JsonCreator
  public static CatType fromValue(String value) {
    for (CatType e : CatType.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}",
]
`;

exports[`JavaGenerator oneOf/discriminator with jackson preset should create an interface for child models 1`] = `
Array [
  "public class Cargo {
  @JsonProperty(\\"vehicle\\")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Vehicle vehicle;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public Vehicle getVehicle() { return this.vehicle; }
  public void setVehicle(Vehicle vehicle) { this.vehicle = vehicle; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cargo self = (Cargo) o;
      return 
        Objects.equals(this.vehicle, self.vehicle) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)vehicle, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Cargo {\\\\n\\" +   
      \\"    vehicle: \\" + toIndentedString(vehicle) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
  "@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXISTING_PROPERTY, property=\\"vehicleType\\", visible=true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Car.class, name = \\"Car\\"),
  @JsonSubTypes.Type(value = Truck.class, name = \\"Truck\\")
})
/**
 * Vehicle represents a union of types: Car, Truck
 */
public interface Vehicle {
  VehicleType getVehicleType();
}",
  "public class Car implements Vehicle {
  @NotNull
  @JsonProperty(\\"vehicleType\\")
  private final VehicleType vehicleType = VehicleType.CAR;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public VehicleType getVehicleType() { return this.vehicleType; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Car self = (Car) o;
      return 
        Objects.equals(this.vehicleType, self.vehicleType) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)vehicleType, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Car {\\\\n\\" +   
      \\"    vehicleType: \\" + toIndentedString(vehicleType) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
  "public enum VehicleType {
  CAR((String)\\"Car\\"), TRUCK((String)\\"Truck\\");

  private String value;

  VehicleType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @JsonCreator
  public static VehicleType fromValue(String value) {
    for (VehicleType e : VehicleType.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}",
  "public class Truck implements Vehicle {
  @NotNull
  @JsonProperty(\\"vehicleType\\")
  private final VehicleType vehicleType = VehicleType.TRUCK;
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Map<String, Object> additionalProperties;

  public VehicleType getVehicleType() { return this.vehicleType; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Truck self = (Truck) o;
      return 
        Objects.equals(this.vehicleType, self.vehicleType) &&
        Objects.equals(this.additionalProperties, self.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash((Object)vehicleType, (Object)additionalProperties);
  }

  @Override
  public String toString() {
    return \\"class Truck {\\\\n\\" +   
      \\"    vehicleType: \\" + toIndentedString(vehicleType) + \\"\\\\n\\" +
      \\"    additionalProperties: \\" + toIndentedString(additionalProperties) + \\"\\\\n\\" +
    \\"}\\";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return \\"null\\";
    }
    return o.toString().replace(\\"\\\\n\\", \\"\\\\n    \\");
  }
}",
]
`;

exports[`JavaGenerator should not render reserved keyword 1`] = `
"public class Address {
  private String reservedReservedEnum;
  private String reservedEnum;

  public String getReservedReservedEnum() { return this.reservedReservedEnum; }
  public void setReservedReservedEnum(String reservedReservedEnum) { this.reservedReservedEnum = reservedReservedEnum; }

  public String getReservedEnum() { return this.reservedEnum; }
  public void setReservedEnum(String reservedEnum) { this.reservedEnum = reservedEnum; }
}"
`;

exports[`JavaGenerator should render \`class\` type 1`] = `
Array [
  "public class Address {
  private String streetName;
  private String city;
  private String state;
  private double houseNumber;
  private Boolean marriage;
  private Object members;
  private Object[] arrayType;
  private Map<String, Object> additionalProperties;

  public String getStreetName() { return this.streetName; }
  public void setStreetName(String streetName) { this.streetName = streetName; }

  public String getCity() { return this.city; }
  public void setCity(String city) { this.city = city; }

  public String getState() { return this.state; }
  public void setState(String state) { this.state = state; }

  public double getHouseNumber() { return this.houseNumber; }
  public void setHouseNumber(double houseNumber) { this.houseNumber = houseNumber; }

  public Boolean getMarriage() { return this.marriage; }
  public void setMarriage(Boolean marriage) { this.marriage = marriage; }

  public Object getMembers() { return this.members; }
  public void setMembers(Object members) { this.members = members; }

  public Object[] getArrayType() { return this.arrayType; }
  public void setArrayType(Object[] arrayType) { this.arrayType = arrayType; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }
}",
  "",
  "",
  "",
]
`;

exports[`JavaGenerator should render \`enum\` type (integer type) 1`] = `
"public enum Numbers {
  NUMBER_0((int)0), NUMBER_1((int)1), NUMBER_2((int)2), NUMBER_3((int)3);

  private int value;

  Numbers(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static Numbers fromValue(int value) {
    for (Numbers e : Numbers.values()) {
      if (e.value == value) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`JavaGenerator should render \`enum\` type (string type) 1`] = `
"public enum States {
  TEXAS((String)\\"Texas\\"), ALABAMA((String)\\"Alabama\\"), CALIFORNIA((String)\\"California\\"), NEW_YORK((String)\\"New York\\");

  private String value;

  States(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static States fromValue(String value) {
    for (States e : States.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`JavaGenerator should render \`enum\` type (union type) 1`] = `
"public enum Union {
  TEXAS((Object)\\"Texas\\"), ALABAMA((Object)\\"Alabama\\"), NUMBER_0((Object)0), NUMBER_1((Object)1), RESERVED_NUMBER_1((Object)\\"1\\"), TRUE((Object)\\"true\\"), CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT((Object)\\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\");

  private Object value;

  Union(Object value) {
    this.value = value;
  }

  public Object getValue() {
    return value;
  }

  public static Union fromValue(Object value) {
    for (Union e : Union.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`JavaGenerator should render List type for collections 1`] = `
"public class CustomClass {
  private List<Object> arrayType;

  public List<Object> getArrayType() { return this.arrayType; }
  public void setArrayType(List<Object> arrayType) { this.arrayType = arrayType; }
}"
`;

exports[`JavaGenerator should render custom preset for \`enum\` type 1`] = `
"@EnumAnnotation
public enum CustomEnum {
  TEXAS((String)\\"Texas\\"), ALABAMA((String)\\"Alabama\\"), CALIFORNIA((String)\\"California\\");

  private String value;

  CustomEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static CustomEnum fromValue(String value) {
    for (CustomEnum e : CustomEnum.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`JavaGenerator should render enums with translated special characters 1`] = `
"public enum States {
  TEST_PLUS((String)\\"test+\\"), TEST((String)\\"test\\"), TEST_MINUS((String)\\"test-\\"), TEST_QUESTION_EXCLAMATION((String)\\"test?!\\"), ASTERISK_TEST((String)\\"*test\\");

  private String value;

  States(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public static States fromValue(String value) {
    for (States e : States.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    throw new IllegalArgumentException(\\"Unexpected value '\\" + value + \\"'\\");
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }
}"
`;

exports[`JavaGenerator should render models and their dependencies 1`] = `
Array [
  "package test.packageName;
import test.packageName.OtherModel;
import java.util.Map;
public class Address {
  private String streetName;
  private String city;
  private String state;
  private double houseNumber;
  private Boolean marriage;
  private Object members;
  private Object[] arrayType;
  private OtherModel otherModel;
  private Map<String, Object> additionalProperties;

  public String getStreetName() { return this.streetName; }
  public void setStreetName(String streetName) { this.streetName = streetName; }

  public String getCity() { return this.city; }
  public void setCity(String city) { this.city = city; }

  public String getState() { return this.state; }
  public void setState(String state) { this.state = state; }

  public double getHouseNumber() { return this.houseNumber; }
  public void setHouseNumber(double houseNumber) { this.houseNumber = houseNumber; }

  public Boolean getMarriage() { return this.marriage; }
  public void setMarriage(Boolean marriage) { this.marriage = marriage; }

  public Object getMembers() { return this.members; }
  public void setMembers(Object members) { this.members = members; }

  public Object[] getArrayType() { return this.arrayType; }
  public void setArrayType(Object[] arrayType) { this.arrayType = arrayType; }

  public OtherModel getOtherModel() { return this.otherModel; }
  public void setOtherModel(OtherModel otherModel) { this.otherModel = otherModel; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }
}",
  "package test.packageName;


",
  "package test.packageName;


",
  "package test.packageName;

import java.util.Map;
public class OtherModel {
  private String streetName;
  private Map<String, Object> additionalProperties;

  public String getStreetName() { return this.streetName; }
  public void setStreetName(String streetName) { this.streetName = streetName; }

  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }
}",
  "package test.packageName;


",
]
`;

exports[`JavaGenerator should work custom preset for \`class\` type 1`] = `
"public class CustomClass {
  @JsonProperty(\\"property\\")
  private String property;
  @JsonProperty(\\"additionalProperties\\")
  private Map<String, Object> additionalProperties;

  @JsonProperty(\\"property\\")
  public String getProperty() { return this.property; }
  @JsonProperty(\\"property\\")
  public void setProperty(String property) { this.property = property; }

  @JsonProperty(\\"additionalProperties\\")
  public Map<String, Object> getAdditionalProperties() { return this.additionalProperties; }
  @JsonProperty(\\"additionalProperties\\")
  public void setAdditionalProperties(Map<String, Object> additionalProperties) { this.additionalProperties = additionalProperties; }
}"
`;
