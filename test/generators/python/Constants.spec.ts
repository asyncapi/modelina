import { isReservedPythonKeyword } from '../../../src/generators/python/Constants';

describe('Reserved keywords', () => {
  it('shoud return true if the word is a reserved keyword', () => {
    expect(isReservedPythonKeyword('break')).toBe(true);
    expect(isReservedPythonKeyword('case')).toBe(true);
    expect(isReservedPythonKeyword('catch')).toBe(true);
    expect(isReservedPythonKeyword('class')).toBe(true);
    expect(isReservedPythonKeyword('const')).toBe(true);
    expect(isReservedPythonKeyword('continue')).toBe(true);
    expect(isReservedPythonKeyword('debugger')).toBe(true);
    expect(isReservedPythonKeyword('default')).toBe(true);
    expect(isReservedPythonKeyword('delete')).toBe(true);
    expect(isReservedPythonKeyword('do')).toBe(true);
    expect(isReservedPythonKeyword('else')).toBe(true);
    expect(isReservedPythonKeyword('enum')).toBe(true);
    expect(isReservedPythonKeyword('export')).toBe(true);
    expect(isReservedPythonKeyword('extends')).toBe(true);
    expect(isReservedPythonKeyword('false')).toBe(true);
    expect(isReservedPythonKeyword('finally')).toBe(true);
    expect(isReservedPythonKeyword('for')).toBe(true);
    expect(isReservedPythonKeyword('function')).toBe(true);
    expect(isReservedPythonKeyword('if')).toBe(true);
    expect(isReservedPythonKeyword('import')).toBe(true);
    expect(isReservedPythonKeyword('in')).toBe(true);
    expect(isReservedPythonKeyword('instanceof')).toBe(true);
    expect(isReservedPythonKeyword('new')).toBe(true);
    expect(isReservedPythonKeyword('null')).toBe(true);
    expect(isReservedPythonKeyword('return')).toBe(true);
    expect(isReservedPythonKeyword('super')).toBe(true);
    expect(isReservedPythonKeyword('switch')).toBe(true);
    expect(isReservedPythonKeyword('this')).toBe(true);
    expect(isReservedPythonKeyword('throw')).toBe(true);
    expect(isReservedPythonKeyword('true')).toBe(true);
    expect(isReservedPythonKeyword('try')).toBe(true);
    expect(isReservedPythonKeyword('typeof')).toBe(true);
    expect(isReservedPythonKeyword('var')).toBe(true);
    expect(isReservedPythonKeyword('void')).toBe(true);
    expect(isReservedPythonKeyword('while')).toBe(true);
    expect(isReservedPythonKeyword('with')).toBe(true);
    expect(isReservedPythonKeyword('any')).toBe(true);
    expect(isReservedPythonKeyword('boolean')).toBe(true);
    expect(isReservedPythonKeyword('constructor')).toBe(true);
    expect(isReservedPythonKeyword('declare')).toBe(true);
    expect(isReservedPythonKeyword('get')).toBe(true);
    expect(isReservedPythonKeyword('module')).toBe(true);
    expect(isReservedPythonKeyword('require')).toBe(true);
    expect(isReservedPythonKeyword('number')).toBe(true);
    expect(isReservedPythonKeyword('set')).toBe(true);
    expect(isReservedPythonKeyword('string')).toBe(true);
    expect(isReservedPythonKeyword('symbol')).toBe(true);
    expect(isReservedPythonKeyword('type')).toBe(true);
    expect(isReservedPythonKeyword('from')).toBe(true);
    expect(isReservedPythonKeyword('of')).toBe(true);
    expect(isReservedPythonKeyword('arguments')).toBe(true);
    expect(isReservedPythonKeyword('as')).toBe(true);
    expect(isReservedPythonKeyword('implements')).toBe(true);
    expect(isReservedPythonKeyword('interface')).toBe(true);
    expect(isReservedPythonKeyword('let')).toBe(true);
    expect(isReservedPythonKeyword('package')).toBe(true);
    expect(isReservedPythonKeyword('private')).toBe(true);
    expect(isReservedPythonKeyword('protected')).toBe(true);
    expect(isReservedPythonKeyword('public')).toBe(true);
    expect(isReservedPythonKeyword('static')).toBe(true);
    expect(isReservedPythonKeyword('yield')).toBe(true);
  });

  it('should return false if the word is not a reserved keyword', () => {
    expect(isReservedPythonKeyword('dinosaur')).toBe(false);
  });
});
