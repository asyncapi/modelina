// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PythonGenerator Class should not render reserved keyword 1`] = `
"class Address: 
  def __init__(self, input):
    if hasattr(input, 'reservedReservedDel'):
    	self._reservedReservedDel = input.reservedReservedDel
    if hasattr(input, 'reservedDel'):
    	self._reservedDel = input.reservedDel

  @property
  def reservedReservedDel(self):
  	return self._reservedReservedDel
  @reservedReservedDel.setter
  def reservedReservedDel(self, reservedReservedDel):
  	self._reservedReservedDel = reservedReservedDel

  @property
  def reservedDel(self):
  	return self._reservedDel
  @reservedDel.setter
  def reservedDel(self, reservedDel):
  	self._reservedDel = reservedDel
"
`;

exports[`PythonGenerator Class should work with empty objects 1`] = `
"class CustomClass: 
  def __init__(self, input):
    \\"\\"\\"
    No properties
    \\"\\"\\"
"
`;

exports[`PythonGenerator Class should render \`class\` type 1`] = `
"class Address: 
  def __init__(self, input):
    self._streetName = input.streetName
    self._city = input.city
    self._state = input.state
    self._houseNumber = input.houseNumber
    if hasattr(input, 'marriage'):
    	self._marriage = input.marriage
    if hasattr(input, 'members'):
    	self._members = input.members
    self._arrayType = input.arrayType
    if hasattr(input, 'additionalProperties'):
    	self._additionalProperties = input.additionalProperties

  @property
  def streetName(self):
  	return self._streetName
  @streetName.setter
  def streetName(self, streetName):
  	self._streetName = streetName

  @property
  def city(self):
  	return self._city
  @city.setter
  def city(self, city):
  	self._city = city

  @property
  def state(self):
  	return self._state
  @state.setter
  def state(self, state):
  	self._state = state

  @property
  def houseNumber(self):
  	return self._houseNumber
  @houseNumber.setter
  def houseNumber(self, houseNumber):
  	self._houseNumber = houseNumber

  @property
  def marriage(self):
  	return self._marriage
  @marriage.setter
  def marriage(self, marriage):
  	self._marriage = marriage

  @property
  def members(self):
  	return self._members
  @members.setter
  def members(self, members):
  	self._members = members

  @property
  def arrayType(self):
  	return self._arrayType
  @arrayType.setter
  def arrayType(self, arrayType):
  	self._arrayType = arrayType

  @property
  def additionalProperties(self):
  	return self._additionalProperties
  @additionalProperties.setter
  def additionalProperties(self, additionalProperties):
  	self._additionalProperties = additionalProperties
"
`;
