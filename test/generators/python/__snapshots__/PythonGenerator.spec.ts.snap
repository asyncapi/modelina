// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PythonGenerator Class should handle self reference models 1`] = `
"class Address: 
  def __init__(self, input: Dict):
    if 'self_model' in input:
      self._self_model: Address = Address(input['self_model'])
    if 'array_model' in input:
      self._array_model: List[Address] = input['array_model']
    if 'tuple_model' in input:
      self._tuple_model: tuple[Address, str] = input['tuple_model']
    if 'map_model' in input:
      self._map_model: dict[str, Address] = input['map_model']
    if 'union_model' in input:
      self._union_model: Address | str = input['union_model']

  @property
  def self_model(self) -> Address:
    return self._self_model
  @self_model.setter
  def self_model(self, self_model: Address):
    self._self_model = self_model

  @property
  def array_model(self) -> List[Address]:
    return self._array_model
  @array_model.setter
  def array_model(self, array_model: List[Address]):
    self._array_model = array_model

  @property
  def tuple_model(self) -> tuple[Address, str]:
    return self._tuple_model
  @tuple_model.setter
  def tuple_model(self, tuple_model: tuple[Address, str]):
    self._tuple_model = tuple_model

  @property
  def map_model(self) -> dict[str, Address]:
    return self._map_model
  @map_model.setter
  def map_model(self, map_model: dict[str, Address]):
    self._map_model = map_model

  @property
  def union_model(self) -> Address | str:
    return self._union_model
  @union_model.setter
  def union_model(self, union_model: Address | str):
    self._union_model = union_model
"
`;

exports[`PythonGenerator Class should not render reserved keyword 1`] = `
"class Address: 
  def __init__(self, input: Dict):
    if 'reserved_del' in input:
      self._reserved_del: str = input['reserved_del']

  @property
  def reserved_del(self) -> str:
    return self._reserved_del
  @reserved_del.setter
  def reserved_del(self, reserved_del: str):
    self._reserved_del = reserved_del
"
`;

exports[`PythonGenerator Class should render \`class\` type 1`] = `
"class Address: 
  def __init__(self, input: Dict):
    self._street_name: str = input['street_name']
    self._city: str = input['city']
    self._state: str = input['state']
    self._house_number: float = input['house_number']
    if 'marriage' in input:
      self._marriage: bool = input['marriage']
    if 'members' in input:
      self._members: str | float | bool = input['members']
    self._array_type: List[str | float | Any] = input['array_type']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any | str] = input['additional_properties']

  @property
  def street_name(self) -> str:
    return self._street_name
  @street_name.setter
  def street_name(self, street_name: str):
    self._street_name = street_name

  @property
  def city(self) -> str:
    return self._city
  @city.setter
  def city(self, city: str):
    self._city = city

  @property
  def state(self) -> str:
    return self._state
  @state.setter
  def state(self, state: str):
    self._state = state

  @property
  def house_number(self) -> float:
    return self._house_number
  @house_number.setter
  def house_number(self, house_number: float):
    self._house_number = house_number

  @property
  def marriage(self) -> bool:
    return self._marriage
  @marriage.setter
  def marriage(self, marriage: bool):
    self._marriage = marriage

  @property
  def members(self) -> str | float | bool:
    return self._members
  @members.setter
  def members(self, members: str | float | bool):
    self._members = members

  @property
  def array_type(self) -> List[str | float | Any]:
    return self._array_type
  @array_type.setter
  def array_type(self, array_type: List[str | float | Any]):
    self._array_type = array_type

  @property
  def additional_properties(self) -> dict[str, Any | str]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any | str]):
    self._additional_properties = additional_properties
"
`;

exports[`PythonGenerator Class should render constant types 1`] = `
"class Address: 
  def __init__(self, input: Dict):
    self._street_name: str = 'someAddress'

  @property
  def street_name(self) -> str:
    return self._street_name
"
`;

exports[`PythonGenerator Class should work with custom preset for \`class\` type 1`] = `
"class CustomClass: 
  test1

  test1


  def __init__(self, input: Dict):
    if 'property' in input:
      self._property: str = input['property']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  test2
  @property
  def property(self) -> str:
    return self._property
  test3
  @property.setter
  def property(self, property: str):
    self._property = property

  test2
  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  test3
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
"
`;

exports[`PythonGenerator Class should work with empty objects 1`] = `
"class CustomClass: 
  def __init__(self, input: Dict):
    \\"\\"\\"
    No properties
    \\"\\"\\"
"
`;

exports[`PythonGenerator Enum should render \`enum\` with mixed types (union type) 1`] = `
"class Things(Enum): 
  TEXAS = \\"Texas\\"
  NUMBER_1 = 1
  RESERVED_NUMBER_1 = \\"1\\"
  RESERVED_FALSE = \\"false\\"
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT = \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\""
`;

exports[`PythonGenerator Enum should render enums with translated special characters 1`] = `
"class States(Enum): 
  TEST_PLUS = \\"test+\\"
  DOLLAR_TEST = \\"$test\\"
  TEST_MINUS = \\"test-\\"
  TEST_QUESTION_EXCLAMATION = \\"test?!\\"
  ASTERISK_TEST = \\"*test\\""
`;

exports[`PythonGenerator Enum should work custom preset for \`enum\` type 1`] = `
"class CustomEnum(Enum): 
  TEXAS = \\"Texas\\"
  ALABAMA = \\"Alabama\\"
  CALIFORNIA = \\"California\\""
`;
