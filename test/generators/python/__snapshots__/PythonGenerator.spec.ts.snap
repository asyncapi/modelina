// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PythonGenerator Class should not render reserved keyword 1`] = `
"class Address: 
  def __init__(self, input):
    if hasattr(input, 'reserved_del'):
      self._reserved_del = input.reserved_del

  @property
  def reserved_del(self):
    return self._reserved_del
  @reserved_del.setter
  def reserved_del(self, reserved_del):
    self._reserved_del = reserved_del
"
`;

exports[`PythonGenerator Class should render \`class\` type 1`] = `
"class Address: 
  def __init__(self, input):
    self._street_name = input.street_name
    self._city = input.city
    self._state = input.state
    self._house_number = input.house_number
    if hasattr(input, 'marriage'):
      self._marriage = input.marriage
    if hasattr(input, 'members'):
      self._members = input.members
    self._array_type = input.array_type
    if hasattr(input, 'additional_properties'):
      self._additional_properties = input.additional_properties

  @property
  def street_name(self):
    return self._street_name
  @street_name.setter
  def street_name(self, street_name):
    self._street_name = street_name

  @property
  def city(self):
    return self._city
  @city.setter
  def city(self, city):
    self._city = city

  @property
  def state(self):
    return self._state
  @state.setter
  def state(self, state):
    self._state = state

  @property
  def house_number(self):
    return self._house_number
  @house_number.setter
  def house_number(self, house_number):
    self._house_number = house_number

  @property
  def marriage(self):
    return self._marriage
  @marriage.setter
  def marriage(self, marriage):
    self._marriage = marriage

  @property
  def members(self):
    return self._members
  @members.setter
  def members(self, members):
    self._members = members

  @property
  def array_type(self):
    return self._array_type
  @array_type.setter
  def array_type(self, array_type):
    self._array_type = array_type

  @property
  def additional_properties(self):
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties):
    self._additional_properties = additional_properties
"
`;

exports[`PythonGenerator Class should work with custom preset for \`class\` type 1`] = `
"class CustomClass: 
  test1

  test1


  def __init__(self, input):
    if hasattr(input, 'property'):
      self._property = input.property
    if hasattr(input, 'additional_properties'):
      self._additional_properties = input.additional_properties

  test2
  @property
  def property(self):
    return self._property
  test3
  @property.setter
  def property(self, property):
    self._property = property

  test2
  @property
  def additional_properties(self):
    return self._additional_properties
  test3
  @additional_properties.setter
  def additional_properties(self, additional_properties):
    self._additional_properties = additional_properties
"
`;

exports[`PythonGenerator Class should work with empty objects 1`] = `
"class CustomClass: 
  def __init__(self, input):
    \\"\\"\\"
    No properties
    \\"\\"\\"
"
`;

exports[`PythonGenerator Enum should render \`enum\` with mixed types (union type) 1`] = `
"class Things(Enum): 
  TEXAS = \\"Texas\\"
  NUMBER_1 = 1
  RESERVED_NUMBER_1 = \\"1\\"
  RESERVED_FALSE = \\"false\\"
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT = \\"{\\\\\\"test\\\\\\":\\\\\\"test\\\\\\"}\\""
`;

exports[`PythonGenerator Enum should render enums with translated special characters 1`] = `
"class States(Enum): 
  TEST_PLUS = \\"test+\\"
  DOLLAR_TEST = \\"$test\\"
  TEST_MINUS = \\"test-\\"
  TEST_QUESTION_EXCLAMATION = \\"test?!\\"
  ASTERISK_TEST = \\"*test\\""
`;

exports[`PythonGenerator Enum should work custom preset for \`enum\` type 1`] = `
"class CustomEnum(Enum): 
  TEXAS = \\"Texas\\"
  ALABAMA = \\"Alabama\\"
  CALIFORNIA = \\"California\\""
`;
