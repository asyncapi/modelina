// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RustGenerator Enum should not render reserved keyword 1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Address {
    pub reserved_enum: Option<String>,
}
"
`;

exports[`RustGenerator Enum should render \`enum\` type (integer type) 1`] = `
"// Numbers represents a Numbers model.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Numbers {
    Number_0,
    Number_1,
    Number_2,
    Number_3,
}
"
`;

exports[`RustGenerator Enum should render \`enum\` with mixed types (union type) 1`] = `
"// Things123 represents a Things123 model.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Things123 {
    Texas,
    Number_1,
    ReservedNumber_1,
    ReservedFalse,
    CurlyleftQuotationTestQuotationColonQuotationTestQuotationCurlyright,
}
"
`;

exports[`RustGenerator Enum should render enums with translated special characters 1`] = `
"// States represents a States model.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum States {
    TestPlus,
    DollarTest,
    TestMinus,
    TestQuestionExclamation,
    AsteriskTest,
}
"
`;

exports[`RustGenerator Enum should render implement Default for \`enum (default provided) 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum CustomEnum {
    Texas,
    Alabama,
    California,
}
"
`;

exports[`RustGenerator Enum should work custom preset for \`enum\` type 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum CustomEnum {
    Texas,
    Alabama,
    California,
}
"
`;

exports[`RustGenerator Packaging Should render supporting files 1`] = `
"[package]
name = \\"asyncapi-rs-models\\"
version = \\"0.0.0\\"
authors = [\\"AsyncAPI Rust Champions\\"]
homepage = \\"https://www.asyncapi.com/tools/modelina\\"
repository = \\"https://github.com/asyncapi/modelina\\"
license = \\"Apache-2.0\\"
description = \\"Rust models generated by AsyncAPI Modelina\\"
edition = \\"2018\\"

[dependencies]
serde = { version = \\"1\\", features = [\\"derive\\"] }
serde_json = { version=\\"1\\", optional = true }

[dev-dependencies]

[features]
default = [\\"json\\"]
json = [\\"dep:serde_json\\"]"
`;

exports[`RustGenerator Packaging Should render supporting files 2`] = `
"#[macro_use]
extern crate serde;
extern crate serde_json;

pub mod numbers;
pub use self::numbers::*;"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, PartialEq)]
pub struct Address {
    pub street_name: String,
    pub city: String,
    pub state: String,
    pub house_number: f64,
    pub marriage: Option<bool>,
    pub members: Option<Box<crate::Members>>,
    pub tuple_type: Option<Box<crate::TupleType>>,
    pub array_type: Vec<String>,
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 2`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub enum Members {
    MembersOneOf00(String),
    MembersOneOf11(f64),
    MembersOneOf22(bool),
}

"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub struct TupleType(String, f64);

"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type  1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, PartialEq)]
pub struct Address {
    pub street_name: String,
    pub city: String,
    pub state: String,
    pub house_number: f64,
    pub marriage: Option<bool>,
    pub members: Option<Box<crate::Members>>,
    pub tuple_type: Option<Box<crate::TupleType>>,
    pub array_type: Vec<String>,
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type  2`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub enum Members {
    MembersOneOf00(String),
    MembersOneOf11(f64),
    MembersOneOf22(bool),
}

"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type  3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub struct TupleType(String, f64);

"
`;
