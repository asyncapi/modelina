// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RustGenerator Enum should not render reserved keyword 1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub struct Address {
    #[serde(rename=\\"reservedEnum\\", skip_serializing_if = \\"Option::is_none\\")]
    reserved_enum: Option<String>,
}
"
`;

exports[`RustGenerator Enum should render \`enum\` type (integer type) 1`] = `
"// Numbers represents a Numbers model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Numbers {
    #[serde(rename=\\"0\\")]
    Number_0,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"2\\")]
    Number_2,
    #[serde(rename=\\"3\\")]
    Number_3,
}
"
`;

exports[`RustGenerator Enum should render \`enum\` with mixed types (union type) 1`] = `
"// Things represents a Things model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Things {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"1\\")]
    ReservedNumber_1,
    #[serde(rename=\\"false\\")]
    ReservedFalse,
    #[serde(flatten)]
    CurlyleftQuotationTestQuotationColonQuotationTestQuotationCurlyright(HashMap<String, serde_json::Value>),
}
"
`;

exports[`RustGenerator Enum should render enums with translated special characters 1`] = `
"// States represents a States model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum States {
    #[serde(rename=\\"test+\\")]
    TestPlus,
    #[serde(rename=\\"$test\\")]
    DollarTest,
    #[serde(rename=\\"test-\\")]
    TestMinus,
    #[serde(rename=\\"test?!\\")]
    TestQuestionExclamation,
    #[serde(rename=\\"*test\\")]
    AsteriskTest,
}
"
`;

exports[`RustGenerator Enum should render implement Default for \`enum (default provided) 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum CustomEnum {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"Alabama\\")]
    Alabama,
    #[serde(rename=\\"California\\")]
    California,
}
"
`;

exports[`RustGenerator Enum should work custom preset for \`enum\` type 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum CustomEnum {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"Alabama\\")]
    Alabama,
    #[serde(rename=\\"California\\")]
    California,
}
"
`;

exports[`RustGenerator Packaging Should render supporting files 1`] = `
"[package]
name = \\"asyncapi-rs-models\\"
version = \\"0.0.0\\"
authors = [\\"AsyncAPI Rust Champions\\"]
homepage = \\"https://www.asyncapi.com/tools/modelina\\"
repository = \\"https://github.com/asyncapi/modelina\\"
license = \\"Apache-2.0\\"
description = \\"Rust models generated by AsyncAPI Modelina\\"
edition = \\"2018\\"

[dependencies]
serde = { version = \\"1\\", features = [\\"derive\\"] }
serde_json = { version=\\"1\\", optional = true }

[dev-dependencies]

[features]
default = [\\"json\\"]
json = [\\"dep:serde_json\\"]"
`;

exports[`RustGenerator Packaging Should render supporting files 2`] = `
"#[macro_use]
extern crate serde;
extern crate serde_json;

pub mod numbers;
pub use self::numbers::*;"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"street_name\\")]
    street_name: String,
    #[serde(rename=\\"city\\")]
    city: String,
    #[serde(rename=\\"state\\")]
    state: String,
    #[serde(rename=\\"house_number\\")]
    house_number: f64,
    #[serde(rename=\\"marriage\\", skip_serializing_if = \\"Option::is_none\\")]
    marriage: Option<bool>,
    #[serde(rename=\\"members\\", skip_serializing_if = \\"Option::is_none\\")]
    members: Option<Box<crate::Members>>,
    #[serde(rename=\\"tuple_type\\", skip_serializing_if = \\"Option::is_none\\")]
    tuple_type: Option<Box<crate::TupleType>>,
    #[serde(rename=\\"array_type\\")]
    array_type: Vec<String>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 2`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub enum Members {
    #[serde(rename=\\"Members0\\")]
    Members0(String),
    #[serde(rename=\\"Members1\\")]
    Members1(f64),
    #[serde(rename=\\"Members2\\")]
    Members2(bool),
}

"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct TupleType(String, f64);

"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type  1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"street_name\\")]
    street_name: String,
    #[serde(rename=\\"city\\")]
    city: String,
    #[serde(rename=\\"state\\")]
    state: String,
    #[serde(rename=\\"house_number\\")]
    house_number: f64,
    #[serde(rename=\\"marriage\\", skip_serializing_if = \\"Option::is_none\\")]
    marriage: Option<bool>,
    #[serde(rename=\\"members\\", skip_serializing_if = \\"Option::is_none\\")]
    members: Option<Box<crate::Members>>,
    #[serde(rename=\\"tuple_type\\", skip_serializing_if = \\"Option::is_none\\")]
    tuple_type: Option<Box<crate::TupleType>>,
    #[serde(rename=\\"array_type\\")]
    array_type: Vec<String>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type  2`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub enum Members {
    #[serde(rename=\\"Members0\\")]
    Members0(String),
    #[serde(rename=\\"Members1\\")]
    Members1(f64),
    #[serde(rename=\\"Members2\\")]
    Members2(bool),
}

"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type  3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct TupleType(String, f64);

"
`;
