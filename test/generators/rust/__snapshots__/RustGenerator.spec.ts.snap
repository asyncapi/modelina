// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RustGenerator AsyncAPI with polymorphism should render 1`] = `
Array [
  "// Critter represents a union of types: Cat, Dog, StickInsect
#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
#[serde(tag = \\"petType\\")]
pub enum Critter {
    #[serde(rename=\\"Cat\\")]
    Cat(crate::Cat),
    #[serde(rename=\\"Dog\\")]
    Dog(crate::Dog),
    #[serde(rename=\\"StickInsect\\")]
    StickInsect(crate::StickInsect),
}

",
  "// Cat represents a Cat model.
#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub struct Cat {
    #[serde(rename=\\"petType\\")]
    pub pet_type: Box<crate::PetType>,
    #[serde(rename=\\"name\\")]
    pub name: String,
    #[serde(rename=\\"huntingSkill\\")]
    pub hunting_skill: Box<crate::HuntingSkill>,
}
",
  "// PetType represents a PetType model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum PetType {
    #[serde(rename=\\"Cat\\")]
    Cat,
    #[serde(rename=\\"Dog\\")]
    Dog,
    #[serde(rename=\\"StickBug\\")]
    StickBug,
}
",
  "// HuntingSkill represents a HuntingSkill model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum HuntingSkill {
    #[serde(rename=\\"clueless\\")]
    Clueless,
    #[serde(rename=\\"lazy\\")]
    Lazy,
    #[serde(rename=\\"adventurous\\")]
    Adventurous,
    #[serde(rename=\\"aggressive\\")]
    Aggressive,
}
",
  "// Dog represents a Dog model.
#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub struct Dog {
    #[serde(rename=\\"petType\\")]
    pub pet_type: Box<crate::PetType>,
    #[serde(rename=\\"name\\")]
    pub name: String,
    #[serde(rename=\\"packSize\\")]
    pub pack_size: i32,
}
",
  "// StickInsect represents a StickInsect model.
#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub struct StickInsect {
    #[serde(rename=\\"petType\\")]
    pub pet_type: Box<crate::PetType>,
    #[serde(rename=\\"name\\")]
    pub name: String,
    #[serde(rename=\\"color\\")]
    pub color: String,
}
",
]
`;

exports[`RustGenerator Enum should not render reserved keyword 1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub struct Address {
    #[serde(rename=\\"enum\\", skip_serializing_if = \\"Option::is_none\\")]
    pub reserved_enum: Option<String>,
    #[serde(rename=\\"reservedEnum\\", skip_serializing_if = \\"Option::is_none\\")]
    pub reserved_reserved_enum: Option<String>,
}
"
`;

exports[`RustGenerator Enum should render \`enum\` type (integer type) 1`] = `
"// Numbers represents a Numbers model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Numbers {
    #[serde(rename=\\"0\\")]
    Number_0,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"2\\")]
    Number_2,
    #[serde(rename=\\"3\\")]
    Number_3,
}
"
`;

exports[`RustGenerator Enum should render \`enum\` with mixed types (union type) 1`] = `
"// Things123 represents a Things123 model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Things123 {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"1\\")]
    ReservedNumber_1,
    #[serde(rename=\\"false\\")]
    False,
    #[serde(flatten)]
    CurlyleftQuotationTestQuotationColonQuotationTestQuotationCurlyright(HashMap<String, serde_json::Value>),
}
"
`;

exports[`RustGenerator Enum should render enums with translated special characters 1`] = `
"// States represents a States model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum States {
    #[serde(rename=\\"test+\\")]
    TestPlus,
    #[serde(rename=\\"$test\\")]
    DollarTest,
    #[serde(rename=\\"test-\\")]
    TestMinus,
    #[serde(rename=\\"test?!\\")]
    TestQuestionExclamation,
    #[serde(rename=\\"*test\\")]
    AsteriskTest,
}
"
`;

exports[`RustGenerator Enum should render implement Default for \`enum (default provided) 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum CustomEnum {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"Alabama\\")]
    Alabama,
    #[serde(rename=\\"California\\")]
    California,
}
"
`;

exports[`RustGenerator Enum should work custom preset for \`enum\` type 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum CustomEnum {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"Alabama\\")]
    Alabama,
    #[serde(rename=\\"California\\")]
    California,
}
"
`;

exports[`RustGenerator Packaging Should render supporting files 1`] = `
"[package]
name = \\"asyncapi-rs-models\\"
version = \\"0.0.0\\"
authors = [\\"AsyncAPI Rust Champions\\"]
homepage = \\"https://www.asyncapi.com/tools/modelina\\"
repository = \\"https://github.com/asyncapi/modelina\\"
license = \\"Apache-2.0\\"
description = \\"Rust models generated by AsyncAPI Modelina\\"
edition = \\"2018\\"

[dependencies]
serde = { version = \\"1\\", features = [\\"derive\\"] }
serde_json = { version=\\"1\\", optional = true }

[dev-dependencies]

[features]
default = [\\"json\\"]
json = [\\"dep:serde_json\\"]"
`;

exports[`RustGenerator Packaging Should render supporting files 2`] = `
"#[macro_use]
extern crate serde;
extern crate serde_json;

pub mod numbers;
pub use self::numbers::*;"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 1`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum Members {
    #[serde(rename=\\"MembersOneOf0\\")]
    MembersOneOf0(String),
    #[serde(rename=\\"MembersOneOf1\\")]
    MembersOneOf1(f64),
    #[serde(rename=\\"MembersOneOf2\\")]
    MembersOneOf2(bool),
}

"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 2`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"street_name\\")]
    pub street_name: String,
    #[serde(rename=\\"city\\")]
    pub city: String,
    #[serde(rename=\\"state\\")]
    pub state: String,
    #[serde(rename=\\"house_number\\")]
    pub house_number: f64,
    #[serde(rename=\\"marriage\\", skip_serializing_if = \\"Option::is_none\\")]
    pub marriage: Option<bool>,
    #[serde(rename=\\"members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub members: Option<Box<crate::Members>>,
    #[serde(rename=\\"tuple_type\\", skip_serializing_if = \\"Option::is_none\\")]
    pub tuple_type: Option<Box<crate::TupleType>>,
    #[serde(rename=\\"array_type\\")]
    pub array_type: Vec<String>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RustGenerator Struct & Complete Models Should render complete models 3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
pub struct TupleType(String, f64);

"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type 1`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum Members {
    #[serde(rename=\\"MembersOneOf0\\")]
    MembersOneOf0(String),
    #[serde(rename=\\"MembersOneOf1\\")]
    MembersOneOf1(f64),
    #[serde(rename=\\"MembersOneOf2\\")]
    MembersOneOf2(bool),
}

"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type 2`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"street_name\\")]
    pub street_name: String,
    #[serde(rename=\\"city\\")]
    pub city: String,
    #[serde(rename=\\"state\\")]
    pub state: String,
    #[serde(rename=\\"house_number\\")]
    pub house_number: f64,
    #[serde(rename=\\"marriage\\", skip_serializing_if = \\"Option::is_none\\")]
    pub marriage: Option<bool>,
    #[serde(rename=\\"members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub members: Option<Box<crate::Members>>,
    #[serde(rename=\\"tuple_type\\", skip_serializing_if = \\"Option::is_none\\")]
    pub tuple_type: Option<Box<crate::TupleType>>,
    #[serde(rename=\\"array_type\\")]
    pub array_type: Vec<String>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RustGenerator Struct & Complete Models should render \`struct\` type 3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
pub struct TupleType(String, f64);

"
`;
