// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RUST_SERDE_PRESET Enum should render \`enum\` of union type with Default implementation of integer type 1`] = `
"// Address represents a Address model.
#[derive('Deserialize', 'Serialize')]
pub struct Address {
    #[serde(rename=\\"members\\")]
    pub members: Box<crate::Members>,
    #[serde(rename=\\"optional_members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub optional_members: Option<Box<crate::OptionalMembers>>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RUST_SERDE_PRESET Enum should render \`enum\` of union type with Default implementation of integer type 2`] = `
"// Members represents a union of types: String, f64, bool
#[derive('Deserialize', 'Serialize')]
pub enum Members {
    #[serde(rename=\\"MembersOneOf00\\")]
    MembersOneOf00(String),
    #[serde(rename=\\"MembersOneOf11\\")]
    MembersOneOf11(f64),
    #[serde(rename=\\"MembersOneOf22\\")]
    MembersOneOf22(bool),
}

"
`;

exports[`RUST_SERDE_PRESET Enum should render \`enum\` of union type with Default implementation of integer type 3`] = `
"// OptionalMembers represents a union of types: String, f64, bool
#[derive('Deserialize', 'Serialize')]
pub enum OptionalMembers {
    #[serde(rename=\\"OptionalMembersOneOf00\\")]
    OptionalMembersOneOf00(String),
    #[serde(rename=\\"OptionalMembersOneOf11\\")]
    OptionalMembersOneOf11(f64),
    #[serde(rename=\\"OptionalMembersOneOf22\\")]
    OptionalMembersOneOf22(bool),
}

"
`;

exports[`RUST_SERDE_PRESET Enum should render \`enum\` of union type with Default implementation of string type 1`] = `
"// Address represents a Address model.
#[derive('Deserialize', 'Serialize')]
pub struct Address {
    #[serde(rename=\\"members\\")]
    pub members: Box<crate::Members>,
    #[serde(rename=\\"optional_members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub optional_members: Option<Box<crate::OptionalMembers>>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RUST_SERDE_PRESET Enum should render \`enum\` of union type with Default implementation of string type 2`] = `
"// Members represents a union of types: String, f64, bool
#[derive('Deserialize', 'Serialize')]
pub enum Members {
    #[serde(rename=\\"MembersOneOf00\\")]
    MembersOneOf00(String),
    #[serde(rename=\\"MembersOneOf11\\")]
    MembersOneOf11(f64),
    #[serde(rename=\\"MembersOneOf22\\")]
    MembersOneOf22(bool),
}

"
`;

exports[`RUST_SERDE_PRESET Enum should render \`enum\` of union type with Default implementation of string type 3`] = `
"// OptionalMembers represents a union of types: String, f64, bool
#[derive('Deserialize', 'Serialize')]
pub enum OptionalMembers {
    #[serde(rename=\\"OptionalMembersOneOf00\\")]
    OptionalMembersOneOf00(String),
    #[serde(rename=\\"OptionalMembersOneOf11\\")]
    OptionalMembersOneOf11(f64),
    #[serde(rename=\\"OptionalMembersOneOf22\\")]
    OptionalMembersOneOf22(bool),
}

"
`;

exports[`RUST_SERDE_PRESET Enum should render \`enum\` with mixed types (union type) and Default implementation 1`] = `
"// Things represents a Things model.
#[derive('Deserialize', 'Serialize')]
pub enum Things {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"1\\")]
    ReservedNumber_1,
    #[serde(rename=\\"false\\")]
    ReservedFalse,
    #[serde(flatten)]
    CurlyleftQuotationTestQuotationColonQuotationTestQuotationCurlyright(HashMap<String, serde_json::Value>),
}
"
`;

exports[`RUST_SERDE_PRESET Enum should render enums with translated special characters 1`] = `
"// States represents a States model.
#[derive('Deserialize', 'Serialize')]
pub enum States {
    #[serde(rename=\\"test+\\")]
    TestPlus,
    #[serde(rename=\\"$test\\")]
    DollarTest,
    #[serde(rename=\\"test-\\")]
    TestMinus,
    #[serde(rename=\\"test?!\\")]
    TestQuestionExclamation,
    #[serde(rename=\\"*test\\")]
    AsteriskTest,
}
"
`;

exports[`RUST_SERDE_PRESET Enum should render implement Default for \`enum (default provided) 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive('Deserialize', 'Serialize')]
pub enum CustomEnum {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"Alabama\\")]
    Alabama,
    #[serde(rename=\\"California\\")]
    California,
}
"
`;

exports[`RUST_SERDE_PRESET Enum should render reserved union for dict array 1`] = `
"// Class represents a Class model.
#[derive('Deserialize', 'Serialize')]
pub struct Class {
    #[serde(rename=\\"students\\")]
    pub students: Vec<crate::ReservedUnion>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, serde_json::Value>>,
}
"
`;

exports[`RUST_SERDE_PRESET Enum should render reserved union for dict array 2`] = `
"// ReservedUnion represents a union of types: Student0, serde_json::Value
#[derive('Deserialize', 'Serialize')]
pub enum ReservedUnion {
    #[serde(rename=\\"Student0\\")]
    Student0(crate::Student),
    #[serde(rename=\\"Undefined1\\")]
    Undefined1(serde_json::Value),
}

"
`;

exports[`RUST_SERDE_PRESET Enum should render reserved union for dict array 3`] = `
"// Student represents a Student model.
#[derive('Deserialize', 'Serialize')]
pub struct Student {
    #[serde(rename=\\"name\\")]
    pub name: String,
    #[serde(rename=\\"birth\\")]
    pub birth: f64,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, serde_json::Value>>,
}
"
`;

exports[`RUST_SERDE_PRESET Struct & Complete Models should render \`struct\` type with all implementations 1`] = `
"// Address represents a Address model.
#[derive('Deserialize', 'Serialize')]
pub struct Address {
    #[serde(rename=\\"street_name\\")]
    pub street_name: String,
    #[serde(rename=\\"city\\")]
    pub city: String,
    #[serde(rename=\\"state\\")]
    pub state: String,
    #[serde(rename=\\"house_number\\")]
    pub house_number: f64,
    #[serde(rename=\\"marriage\\", skip_serializing_if = \\"Option::is_none\\")]
    pub marriage: Option<bool>,
    #[serde(rename=\\"members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub members: Option<Box<crate::Members>>,
    #[serde(rename=\\"tuple_type\\", skip_serializing_if = \\"Option::is_none\\")]
    pub tuple_type: Option<Box<crate::TupleType>>,
    #[serde(rename=\\"array_type\\")]
    pub array_type: Vec<String>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}
"
`;

exports[`RUST_SERDE_PRESET Struct & Complete Models should render \`struct\` type with all implementations 2`] = `
"// Members represents a union of types: String, f64, bool
#[derive('Deserialize', 'Serialize')]
pub enum Members {
    #[serde(rename=\\"MembersOneOf00\\")]
    MembersOneOf00(String),
    #[serde(rename=\\"MembersOneOf11\\")]
    MembersOneOf11(f64),
    #[serde(rename=\\"MembersOneOf22\\")]
    MembersOneOf22(bool),
}

"
`;

exports[`RUST_SERDE_PRESET Struct & Complete Models should render \`struct\` type with all implementations 3`] = `
"// TupleType represents a TupleType model.
#[derive('Deserialize', 'Serialize')]
pub struct TupleType(String, f64);

"
`;
