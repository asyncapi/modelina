// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RUST_COMMON_PRESET Enum should render \`enum\` of union type with Default implementation of integer type 1`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum Members {
    #[serde(rename=\\"MembersOneOf0\\")]
    MembersOneOf0(String),
    #[serde(rename=\\"MembersOneOf1\\")]
    MembersOneOf1(f64),
    #[serde(rename=\\"MembersOneOf2\\")]
    MembersOneOf2(bool),
}

"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` of union type with Default implementation of integer type 2`] = `
"// OptionalMembers represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum OptionalMembers {
    #[serde(rename=\\"OptionalMembersOneOf0\\")]
    OptionalMembersOneOf0(String),
    #[serde(rename=\\"OptionalMembersOneOf1\\")]
    OptionalMembersOneOf1(f64),
    #[serde(rename=\\"OptionalMembersOneOf2\\")]
    OptionalMembersOneOf2(bool),
}

"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` of union type with Default implementation of integer type 3`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"members\\")]
    pub members: Box<crate::Members>,
    #[serde(rename=\\"optional_members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub optional_members: Option<Box<crate::OptionalMembers>>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}

impl Address {
    pub fn new(members: crate::Members, optional_members: Option<crate::OptionalMembers>, additional_properties: Option<std::collections::HashMap<String, String>>) -> Address {
        Address {
            members: Box::new(members),
            optional_members: optional_members.map(Box::new),
            additional_properties,
        }
    }
}
"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` of union type with Default implementation of string type 1`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum Members {
    #[serde(rename=\\"MembersOneOf0\\")]
    MembersOneOf0(String),
    #[serde(rename=\\"MembersOneOf1\\")]
    MembersOneOf1(f64),
    #[serde(rename=\\"MembersOneOf2\\")]
    MembersOneOf2(bool),
}

"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` of union type with Default implementation of string type 2`] = `
"// OptionalMembers represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum OptionalMembers {
    #[serde(rename=\\"OptionalMembersOneOf0\\")]
    OptionalMembersOneOf0(String),
    #[serde(rename=\\"OptionalMembersOneOf1\\")]
    OptionalMembersOneOf1(f64),
    #[serde(rename=\\"OptionalMembersOneOf2\\")]
    OptionalMembersOneOf2(bool),
}

"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` of union type with Default implementation of string type 3`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"members\\")]
    pub members: Box<crate::Members>,
    #[serde(rename=\\"optional_members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub optional_members: Option<Box<crate::OptionalMembers>>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}

impl Address {
    pub fn new(members: crate::Members, optional_members: Option<crate::OptionalMembers>, additional_properties: Option<std::collections::HashMap<String, String>>) -> Address {
        Address {
            members: Box::new(members),
            optional_members: optional_members.map(Box::new),
            additional_properties,
        }
    }
}
"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` with mixed types (union type) and Default implementation 1`] = `
"// Things represents a Things model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Things {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"1\\")]
    ReservedNumber_1,
    #[serde(rename=\\"false\\")]
    False,
    #[serde(flatten)]
    CurlyleftQuotationTestQuotationColonQuotationTestQuotationCurlyright(HashMap<String, serde_json::Value>),
}
impl Default for Things {
    fn default() -> Things {
        Things::Texas
    }
}"
`;

exports[`RUST_COMMON_PRESET Enum should render \`enum\` without Default implementation 1`] = `
"// Things represents a Things model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum Things {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"1\\")]
    Number_1,
    #[serde(rename=\\"1\\")]
    ReservedNumber_1,
    #[serde(rename=\\"false\\")]
    False,
    #[serde(flatten)]
    CurlyleftQuotationTestQuotationColonQuotationTestQuotationCurlyright(HashMap<String, serde_json::Value>),
}
"
`;

exports[`RUST_COMMON_PRESET Enum should render enums with translated special characters 1`] = `
"// States represents a States model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum States {
    #[serde(rename=\\"test+\\")]
    TestPlus,
    #[serde(rename=\\"$test\\")]
    DollarTest,
    #[serde(rename=\\"test-\\")]
    TestMinus,
    #[serde(rename=\\"test?!\\")]
    TestQuestionExclamation,
    #[serde(rename=\\"*test\\")]
    AsteriskTest,
}
impl Default for States {
    fn default() -> States {
        States::TestPlus
    }
}"
`;

exports[`RUST_COMMON_PRESET Enum should render implement Default for \`enum (default provided) 1`] = `
"// CustomEnum represents a CustomEnum model.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]
pub enum CustomEnum {
    #[serde(rename=\\"Texas\\")]
    Texas,
    #[serde(rename=\\"Alabama\\")]
    Alabama,
    #[serde(rename=\\"California\\")]
    California,
}
impl Default for CustomEnum {
    fn default() -> CustomEnum {
        CustomEnum::Texas
    }
}"
`;

exports[`RUST_COMMON_PRESET Enum should render reserved union for dict array 1`] = `
"// Class represents a Class model.
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Class {
    #[serde(rename=\\"students\\")]
    pub students: Vec<crate::Student>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl Class {
    pub fn new(students: Vec<crate::Student>, additional_properties: Option<std::collections::HashMap<String, serde_json::Value>>) -> Class {
        Class {
            students,
            additional_properties,
        }
    }
}
"
`;

exports[`RUST_COMMON_PRESET Enum should render reserved union for dict array 2`] = `
"// Student represents a Student model.
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Student {
    #[serde(rename=\\"name\\")]
    pub name: String,
    #[serde(rename=\\"birth\\")]
    pub birth: f64,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl Student {
    pub fn new(name: String, birth: f64, additional_properties: Option<std::collections::HashMap<String, serde_json::Value>>) -> Student {
        Student {
            name,
            birth,
            additional_properties,
        }
    }
}
"
`;

exports[`RUST_COMMON_PRESET Struct & Complete Models should render \`struct\` type with all implementations 1`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum Members {
    #[serde(rename=\\"MembersOneOf0\\")]
    MembersOneOf0(String),
    #[serde(rename=\\"MembersOneOf1\\")]
    MembersOneOf1(f64),
    #[serde(rename=\\"MembersOneOf2\\")]
    MembersOneOf2(bool),
}

"
`;

exports[`RUST_COMMON_PRESET Struct & Complete Models should render \`struct\` type with all implementations 2`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
pub struct Address {
    #[serde(rename=\\"street_name\\")]
    pub street_name: String,
    #[serde(rename=\\"city\\")]
    pub city: String,
    #[serde(rename=\\"state\\")]
    pub state: String,
    #[serde(rename=\\"house_number\\")]
    pub house_number: f64,
    #[serde(rename=\\"marriage\\", skip_serializing_if = \\"Option::is_none\\")]
    pub marriage: Option<bool>,
    #[serde(rename=\\"members\\", skip_serializing_if = \\"Option::is_none\\")]
    pub members: Option<Box<crate::Members>>,
    #[serde(rename=\\"tuple_type\\", skip_serializing_if = \\"Option::is_none\\")]
    pub tuple_type: Option<Box<crate::TupleType>>,
    #[serde(rename=\\"array_type\\")]
    pub array_type: Vec<String>,
    #[serde(rename=\\"additionalProperties\\", skip_serializing_if = \\"Option::is_none\\")]
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}

impl Address {
    pub fn new(street_name: String, city: String, state: String, house_number: f64, marriage: Option<bool>, members: Option<crate::Members>, tuple_type: Option<crate::TupleType>, array_type: Vec<String>, additional_properties: Option<std::collections::HashMap<String, String>>) -> Address {
        Address {
            street_name,
            city,
            state,
            house_number,
            marriage,
            members: members.map(Box::new),
            tuple_type: tuple_type.map(Box::new),
            array_type,
            additional_properties,
        }
    }
}
"
`;

exports[`RUST_COMMON_PRESET Struct & Complete Models should render \`struct\` type with all implementations 3`] = `
"// TupleType represents a TupleType model.
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
pub struct TupleType(String, f64);

impl TupleType {
    pub fn new(value_0: String, value_1: f64) -> TupleType {
        TupleType(value_0, value_1)
    }
}

"
`;

exports[`RUST_COMMON_PRESET Struct & Complete Models should render \`struct\` without Default or new() implementation 1`] = `
"// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, Deserialize, PartialEq, PartialOrd, Serialize)]
#[serde(untagged)]
pub enum Members {
    #[serde(rename=\\"MembersOneOf0\\")]
    MembersOneOf0(String),
    #[serde(rename=\\"MembersOneOf1\\")]
    MembersOneOf1(f64),
    #[serde(rename=\\"MembersOneOf2\\")]
    MembersOneOf2(bool),
}

"
`;
