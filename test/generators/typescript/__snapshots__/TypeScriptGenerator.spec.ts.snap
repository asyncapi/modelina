// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeScriptGenerator AsyncAPI with polymorphism should render 6 models (1 oneOf, 3 classes and 2 enums) 1`] = `
Array [
  "type AnonymousSchema_1 = Cat | Dog | StickInsect;",
  "class Cat {
  private _petType: PetType.CAT = PetType.CAT;
  private _reservedName: string;
  private _huntingSkill: HuntingSkill;

  constructor(input: {
    reservedName: string,
    huntingSkill: HuntingSkill,
  }) {
    this._reservedName = input.reservedName;
    this._huntingSkill = input.huntingSkill;
  }

  get petType(): PetType.CAT { return this._petType; }

  get reservedName(): string { return this._reservedName; }
  set reservedName(reservedName: string) { this._reservedName = reservedName; }

  get huntingSkill(): HuntingSkill { return this._huntingSkill; }
  set huntingSkill(huntingSkill: HuntingSkill) { this._huntingSkill = huntingSkill; }
}",
  "enum PetType {
  CAT = \\"Cat\\",
  DOG = \\"Dog\\",
  STICK_BUG = \\"StickBug\\",
}",
  "enum HuntingSkill {
  CLUELESS = \\"clueless\\",
  LAZY = \\"lazy\\",
  ADVENTUROUS = \\"adventurous\\",
  AGGRESSIVE = \\"aggressive\\",
}",
  "class Dog {
  private _petType: PetType.DOG = PetType.DOG;
  private _reservedName: string;
  private _packSize: number;

  constructor(input: {
    reservedName: string,
    packSize: number,
  }) {
    this._reservedName = input.reservedName;
    this._packSize = input.packSize;
  }

  get petType(): PetType.DOG { return this._petType; }

  get reservedName(): string { return this._reservedName; }
  set reservedName(reservedName: string) { this._reservedName = reservedName; }

  get packSize(): number { return this._packSize; }
  set packSize(packSize: number) { this._packSize = packSize; }
}",
  "class StickInsect {
  private _petType: PetType.STICK_BUG = PetType.STICK_BUG;
  private _reservedName: string;
  private _color: string;

  constructor(input: {
    reservedName: string,
    color: string,
  }) {
    this._reservedName = input.reservedName;
    this._color = input.color;
  }

  get petType(): PetType.STICK_BUG { return this._petType; }

  get reservedName(): string { return this._reservedName; }
  set reservedName(reservedName: string) { this._reservedName = reservedName; }

  get color(): string { return this._color; }
  set color(color: string) { this._color = color; }
}",
]
`;

exports[`TypeScriptGenerator AsyncAPI with polymorphism should render enum with discriminator 1`] = `
"enum PetType {
  CAT = \\"Cat\\",
  DOG = \\"Dog\\",
  STICK_BUG = \\"StickBug\\",
}"
`;

exports[`TypeScriptGenerator CloudEvent handle allOf with const in CloudEvent type 1`] = `
Array [
  "type Pet = Dog | Cat;",
  "class Dog {
  private _id: string;
  private _source: string;
  private _specversion: string;
  private _reservedType: DogType.DOG = DogType.DOG;
  private _dataschema?: string;
  private _time?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    id: string,
    source: string,
    specversion: string,
    dataschema?: string,
    time?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._id = input.id;
    this._source = input.source;
    this._specversion = input.specversion;
    this._dataschema = input.dataschema;
    this._time = input.time;
    this._additionalProperties = input.additionalProperties;
  }

  get id(): string { return this._id; }
  set id(id: string) { this._id = id; }

  get source(): string { return this._source; }
  set source(source: string) { this._source = source; }

  get specversion(): string { return this._specversion; }
  set specversion(specversion: string) { this._specversion = specversion; }

  get reservedType(): DogType.DOG { return this._reservedType; }

  get dataschema(): string | undefined { return this._dataschema; }
  set dataschema(dataschema: string | undefined) { this._dataschema = dataschema; }

  get time(): string | undefined { return this._time; }
  set time(time: string | undefined) { this._time = time; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}",
  "enum DogType {
  DOG = \\"Dog\\",
}",
  "class Cat {
  private _id: string;
  private _source: string;
  private _specversion: string;
  private _reservedType: CatType.CAT = CatType.CAT;
  private _dataschema?: string;
  private _time?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    id: string,
    source: string,
    specversion: string,
    dataschema?: string,
    time?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._id = input.id;
    this._source = input.source;
    this._specversion = input.specversion;
    this._dataschema = input.dataschema;
    this._time = input.time;
    this._additionalProperties = input.additionalProperties;
  }

  get id(): string { return this._id; }
  set id(id: string) { this._id = id; }

  get source(): string { return this._source; }
  set source(source: string) { this._source = source; }

  get specversion(): string { return this._specversion; }
  set specversion(specversion: string) { this._specversion = specversion; }

  get reservedType(): CatType.CAT { return this._reservedType; }

  get dataschema(): string | undefined { return this._dataschema; }
  set dataschema(dataschema: string | undefined) { this._dataschema = dataschema; }

  get time(): string | undefined { return this._time; }
  set time(time: string | undefined) { this._time = time; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}",
  "enum CatType {
  CAT = \\"Cat\\",
}",
]
`;

exports[`TypeScriptGenerator Combine oneOf and allOf should combine oneOf and allOf 1`] = `
Array [
  "type Pet = Cat | Dog;",
  "class Cat {
  private _animalType?: AnimalType.CAT = AnimalType.CAT;
  private _age?: number;
  private _huntingSkill?: HuntingSkill;

  constructor(input: {
    age?: number,
    huntingSkill?: HuntingSkill,
  }) {
    this._age = input.age;
    this._huntingSkill = input.huntingSkill;
  }

  get animalType(): AnimalType.CAT | undefined { return this._animalType; }

  get age(): number | undefined { return this._age; }
  set age(age: number | undefined) { this._age = age; }

  get huntingSkill(): HuntingSkill | undefined { return this._huntingSkill; }
  set huntingSkill(huntingSkill: HuntingSkill | undefined) { this._huntingSkill = huntingSkill; }
}",
  "enum AnimalType {
  CAT = \\"Cat\\",
  DOG = \\"Dog\\",
}",
  "enum HuntingSkill {
  CLUELESS = \\"clueless\\",
  LAZY = \\"lazy\\",
}",
  "class Dog {
  private _animalType?: AnimalType.DOG = AnimalType.DOG;
  private _age?: number;
  private _breed?: DogBreed;

  constructor(input: {
    age?: number,
    breed?: DogBreed,
  }) {
    this._age = input.age;
    this._breed = input.breed;
  }

  get animalType(): AnimalType.DOG | undefined { return this._animalType; }

  get age(): number | undefined { return this._age; }
  set age(age: number | undefined) { this._age = age; }

  get breed(): DogBreed | undefined { return this._breed; }
  set breed(breed: DogBreed | undefined) { this._breed = breed; }
}",
  "enum DogBreed {
  BULLDOG = \\"bulldog\\",
  BICHONS_SPACE_FRISE = \\"bichons frise\\",
}",
]
`;

exports[`TypeScriptGenerator Combine properties and oneOf should combine properties and oneOf 1`] = `
Array [
  "type Pet = Cat | Dog;",
  "class Cat {
  private _petType: PetType.CAT = PetType.CAT;
  private _age?: number;
  private _huntingSkill?: HuntingSkill;

  constructor(input: {
    age?: number,
    huntingSkill?: HuntingSkill,
  }) {
    this._age = input.age;
    this._huntingSkill = input.huntingSkill;
  }

  get petType(): PetType.CAT { return this._petType; }

  get age(): number | undefined { return this._age; }
  set age(age: number | undefined) { this._age = age; }

  get huntingSkill(): HuntingSkill | undefined { return this._huntingSkill; }
  set huntingSkill(huntingSkill: HuntingSkill | undefined) { this._huntingSkill = huntingSkill; }
}",
  "enum PetType {
  CAT = \\"Cat\\",
  DOG = \\"Dog\\",
}",
  "enum HuntingSkill {
  CLUELESS = \\"clueless\\",
  LAZY = \\"lazy\\",
}",
  "class Dog {
  private _petType: PetType.DOG = PetType.DOG;
  private _age?: number;
  private _breed?: DogBreed;

  constructor(input: {
    age?: number,
    breed?: DogBreed,
  }) {
    this._age = input.age;
    this._breed = input.breed;
  }

  get petType(): PetType.DOG { return this._petType; }

  get age(): number | undefined { return this._age; }
  set age(age: number | undefined) { this._age = age; }

  get breed(): DogBreed | undefined { return this._breed; }
  set breed(breed: DogBreed | undefined) { this._breed = breed; }
}",
  "enum DogBreed {
  BULLDOG = \\"bulldog\\",
  BICHONS_SPACE_FRISE = \\"bichons frise\\",
}",
]
`;

exports[`TypeScriptGenerator const should generate a const string 1`] = `
Array [
  "class LightMeasured {
  private _reservedType?: 'test' = 'test';

  constructor(input: {
  
  }) {
  
  }

  get reservedType(): 'test' | undefined { return this._reservedType; }
}",
]
`;

exports[`TypeScriptGenerator const should generate a single enum with two values 1`] = `
Array [
  "class LightMeasured {
  private _reservedType?: ReservedType.MY_MESSAGE = ReservedType.MY_MESSAGE;
  private _type2?: Type2.MY_MESSAGE2 = Type2.MY_MESSAGE2;

  constructor(input: {
  
  }) {
  
  }

  get reservedType(): ReservedType.MY_MESSAGE | undefined { return this._reservedType; }

  get type2(): Type2.MY_MESSAGE2 | undefined { return this._type2; }
}",
  "enum ReservedType {
  MY_MESSAGE = \\"MyMessage\\",
  MY_MESSAGE2 = \\"MyMessage2\\",
}",
  "enum Type2 {
  MY_MESSAGE = \\"MyMessage\\",
  MY_MESSAGE2 = \\"MyMessage2\\",
}",
]
`;

exports[`TypeScriptGenerator const should generate a single enum with two values and a string enum 1`] = `
Array [
  "class LightMeasured {
  private _reservedType?: MyCommonEnums | 'MyMessage2';

  constructor(input: {
    reservedType?: MyCommonEnums | 'MyMessage2',
  }) {
    this._reservedType = input.reservedType;
  }

  get reservedType(): MyCommonEnums | 'MyMessage2' | undefined { return this._reservedType; }
  set reservedType(reservedType: MyCommonEnums | 'MyMessage2' | undefined) { this._reservedType = reservedType; }
}",
  "enum MyCommonEnums {
  MY_MESSAGE = \\"MyMessage\\",
  MY_MESSAGE2 = \\"MyMessage2\\",
}",
]
`;

exports[`TypeScriptGenerator if/then/else handle if/then/else required properties 1`] = `
Array [
  "class ReservedEvent {
  private _id: string;
  private _action?: Action;
  private _eventTime?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    id: string,
    action?: Action,
    eventTime?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._id = input.id;
    this._action = input.action;
    this._eventTime = input.eventTime;
    this._additionalProperties = input.additionalProperties;
  }

  get id(): string { return this._id; }
  set id(id: string) { this._id = id; }

  get action(): Action | undefined { return this._action; }
  set action(action: Action | undefined) { this._action = action; }

  get eventTime(): string | undefined { return this._eventTime; }
  set eventTime(eventTime: string | undefined) { this._eventTime = eventTime; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}",
  "enum Action {
  ADD = \\"ADD\\",
  UPDATE = \\"UPDATE\\",
  RESERVED_DELETE = \\"DELETE\\",
}",
]
`;

exports[`TypeScriptGenerator if/then/else handle recursive schemas 1`] = `
Array [
  "class Root {
  private _condition?: string;
  private _test?: Test;

  constructor(input: {
    condition?: string,
    test?: Test,
  }) {
    this._condition = input.condition;
    this._test = input.test;
  }

  get condition(): string | undefined { return this._condition; }
  set condition(condition: string | undefined) { this._condition = condition; }

  get test(): Test | undefined { return this._test; }
  set test(test: Test | undefined) { this._test = test; }
}",
  "class Test {
  private _test2?: string;

  constructor(input: {
    test2?: string,
  }) {
    this._test2 = input.test2;
  }

  get test2(): string | undefined { return this._test2; }
  set test2(test2: string | undefined) { this._test2 = test2; }
}",
]
`;

exports[`TypeScriptGenerator should not render \`class\` with reserved keyword 1`] = `
"class Address {
  private _reservedReservedEnum?: string;
  private _reservedEnum?: string;

  constructor(input: {
    reservedReservedEnum?: string,
    reservedEnum?: string,
  }) {
    this._reservedReservedEnum = input.reservedReservedEnum;
    this._reservedEnum = input.reservedEnum;
  }

  get reservedReservedEnum(): string | undefined { return this._reservedReservedEnum; }
  set reservedReservedEnum(reservedReservedEnum: string | undefined) { this._reservedReservedEnum = reservedReservedEnum; }

  get reservedEnum(): string | undefined { return this._reservedEnum; }
  set reservedEnum(reservedEnum: string | undefined) { this._reservedEnum = reservedEnum; }
}"
`;

exports[`TypeScriptGenerator should render \`class\` type 1`] = `
"class Address {
  private _streetName: string;
  private _city: string;
  private _state: string;
  private _houseNumber: number;
  private _marriage?: boolean;
  private _members?: string | number | boolean;
  private _tupleType?: [string, number];
  private _tupleTypeWithAdditionalItems?: (string | number | any)[];
  private _arrayType: string[];
  private _additionalProperties?: Map<string, any | string>;

  constructor(input: {
    streetName: string,
    city: string,
    state: string,
    houseNumber: number,
    marriage?: boolean,
    members?: string | number | boolean,
    tupleType?: [string, number],
    tupleTypeWithAdditionalItems?: (string | number | any)[],
    arrayType: string[],
    additionalProperties?: Map<string, any | string>,
  }) {
    this._streetName = input.streetName;
    this._city = input.city;
    this._state = input.state;
    this._houseNumber = input.houseNumber;
    this._marriage = input.marriage;
    this._members = input.members;
    this._tupleType = input.tupleType;
    this._tupleTypeWithAdditionalItems = input.tupleTypeWithAdditionalItems;
    this._arrayType = input.arrayType;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string { return this._streetName; }
  set streetName(streetName: string) { this._streetName = streetName; }

  get city(): string { return this._city; }
  set city(city: string) { this._city = city; }

  get state(): string { return this._state; }
  set state(state: string) { this._state = state; }

  get houseNumber(): number { return this._houseNumber; }
  set houseNumber(houseNumber: number) { this._houseNumber = houseNumber; }

  get marriage(): boolean | undefined { return this._marriage; }
  set marriage(marriage: boolean | undefined) { this._marriage = marriage; }

  get members(): string | number | boolean | undefined { return this._members; }
  set members(members: string | number | boolean | undefined) { this._members = members; }

  get tupleType(): [string, number] | undefined { return this._tupleType; }
  set tupleType(tupleType: [string, number] | undefined) { this._tupleType = tupleType; }

  get tupleTypeWithAdditionalItems(): (string | number | any)[] | undefined { return this._tupleTypeWithAdditionalItems; }
  set tupleTypeWithAdditionalItems(tupleTypeWithAdditionalItems: (string | number | any)[] | undefined) { this._tupleTypeWithAdditionalItems = tupleTypeWithAdditionalItems; }

  get arrayType(): string[] { return this._arrayType; }
  set arrayType(arrayType: string[]) { this._arrayType = arrayType; }

  get additionalProperties(): Map<string, any | string> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any | string> | undefined) { this._additionalProperties = additionalProperties; }
}"
`;

exports[`TypeScriptGenerator should render \`enum\` type 1`] = `
"enum States {
  TEXAS = \\"Texas\\",
  ALABAMA = \\"Alabama\\",
  CALIFORNIA = \\"California\\",
}"
`;

exports[`TypeScriptGenerator should render \`enum\` type as \`union\` if option enumType = \`union\` 1`] = `"type States = \\"Texas\\" | \\"Alabama\\" | \\"California\\";"`;

exports[`TypeScriptGenerator should render \`interface\` type 1`] = `
"interface Address {
  streetName: string;
  city: string;
  state: string;
  houseNumber: number;
  marriage?: boolean;
  members?: string | number | boolean;
  tupleType?: [string, number];
  tupleTypeWithAdditionalItems?: (string | number | any)[];
  arrayType: string[];
  additionalProperties?: Map<string, any | string>;
}"
`;

exports[`TypeScriptGenerator should render \`type\` type - array of primitive type 1`] = `"type TypeArray = string[];"`;

exports[`TypeScriptGenerator should render \`type\` type - array of union type 1`] = `"type TypeArray = (string | number | boolean)[];"`;

exports[`TypeScriptGenerator should render \`type\` type - enum 1`] = `
"enum TypeEnum {
  TEXAS = \\"Texas\\",
  ALABAMA = \\"Alabama\\",
  CALIFORNIA = \\"California\\",
  NUMBER_0 = 0,
  NUMBER_1 = 1,
  RESERVED_FALSE = \\"false\\",
  RESERVED_TRUE = \\"true\\",
}"
`;

exports[`TypeScriptGenerator should render \`type\` type - primitive 1`] = `"type TypePrimitive = string;"`;

exports[`TypeScriptGenerator should render \`type\` type - union 1`] = `"type TypeUnion = string | number | boolean;"`;

exports[`TypeScriptGenerator should render enums with translated special characters 1`] = `
"enum States {
  TEST_PLUS = \\"test+\\",
  TEST = \\"test\\",
  TEST_MINUS = \\"test-\\",
  TEST_QUESTION_EXCLAMATION = \\"test?!\\",
  ASTERISK_TEST = \\"*test\\",
}"
`;

exports[`TypeScriptGenerator should render models and their dependencies for CJS module system 1`] = `
"const OtherModel = require('./OtherModel');
class Address {
  private _streetName: string;
  private _city: string;
  private _state: string;
  private _houseNumber: number;
  private _marriage?: boolean;
  private _members?: string | number | boolean;
  private _arrayType: (string | number | any)[];
  private _otherModel?: OtherModel;
  private _additionalProperties?: Map<string, any | string>;

  constructor(input: {
    streetName: string,
    city: string,
    state: string,
    houseNumber: number,
    marriage?: boolean,
    members?: string | number | boolean,
    arrayType: (string | number | any)[],
    otherModel?: OtherModel,
    additionalProperties?: Map<string, any | string>,
  }) {
    this._streetName = input.streetName;
    this._city = input.city;
    this._state = input.state;
    this._houseNumber = input.houseNumber;
    this._marriage = input.marriage;
    this._members = input.members;
    this._arrayType = input.arrayType;
    this._otherModel = input.otherModel;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string { return this._streetName; }
  set streetName(streetName: string) { this._streetName = streetName; }

  get city(): string { return this._city; }
  set city(city: string) { this._city = city; }

  get state(): string { return this._state; }
  set state(state: string) { this._state = state; }

  get houseNumber(): number { return this._houseNumber; }
  set houseNumber(houseNumber: number) { this._houseNumber = houseNumber; }

  get marriage(): boolean | undefined { return this._marriage; }
  set marriage(marriage: boolean | undefined) { this._marriage = marriage; }

  get members(): string | number | boolean | undefined { return this._members; }
  set members(members: string | number | boolean | undefined) { this._members = members; }

  get arrayType(): (string | number | any)[] { return this._arrayType; }
  set arrayType(arrayType: (string | number | any)[]) { this._arrayType = arrayType; }

  get otherModel(): OtherModel | undefined { return this._otherModel; }
  set otherModel(otherModel: OtherModel | undefined) { this._otherModel = otherModel; }

  get additionalProperties(): Map<string, any | string> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any | string> | undefined) { this._additionalProperties = additionalProperties; }
}
module.exports = Address;"
`;

exports[`TypeScriptGenerator should render models and their dependencies for CJS module system 2`] = `
"
class OtherModel {
  private _streetName?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    streetName?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._streetName = input.streetName;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string | undefined { return this._streetName; }
  set streetName(streetName: string | undefined) { this._streetName = streetName; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}
module.exports = OtherModel;"
`;

exports[`TypeScriptGenerator should render models and their dependencies for CJS module system with named exports 1`] = `
"const {OtherModel} = require('./OtherModel');
class Address {
  private _streetName: string;
  private _city: string;
  private _state: string;
  private _houseNumber: number;
  private _marriage?: boolean;
  private _members?: string | number | boolean;
  private _arrayType: (string | number | any)[];
  private _otherModel?: OtherModel;
  private _additionalProperties?: Map<string, any | string>;

  constructor(input: {
    streetName: string,
    city: string,
    state: string,
    houseNumber: number,
    marriage?: boolean,
    members?: string | number | boolean,
    arrayType: (string | number | any)[],
    otherModel?: OtherModel,
    additionalProperties?: Map<string, any | string>,
  }) {
    this._streetName = input.streetName;
    this._city = input.city;
    this._state = input.state;
    this._houseNumber = input.houseNumber;
    this._marriage = input.marriage;
    this._members = input.members;
    this._arrayType = input.arrayType;
    this._otherModel = input.otherModel;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string { return this._streetName; }
  set streetName(streetName: string) { this._streetName = streetName; }

  get city(): string { return this._city; }
  set city(city: string) { this._city = city; }

  get state(): string { return this._state; }
  set state(state: string) { this._state = state; }

  get houseNumber(): number { return this._houseNumber; }
  set houseNumber(houseNumber: number) { this._houseNumber = houseNumber; }

  get marriage(): boolean | undefined { return this._marriage; }
  set marriage(marriage: boolean | undefined) { this._marriage = marriage; }

  get members(): string | number | boolean | undefined { return this._members; }
  set members(members: string | number | boolean | undefined) { this._members = members; }

  get arrayType(): (string | number | any)[] { return this._arrayType; }
  set arrayType(arrayType: (string | number | any)[]) { this._arrayType = arrayType; }

  get otherModel(): OtherModel | undefined { return this._otherModel; }
  set otherModel(otherModel: OtherModel | undefined) { this._otherModel = otherModel; }

  get additionalProperties(): Map<string, any | string> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any | string> | undefined) { this._additionalProperties = additionalProperties; }
}
exports.Address = Address;"
`;

exports[`TypeScriptGenerator should render models and their dependencies for CJS module system with named exports 2`] = `
"
class OtherModel {
  private _streetName?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    streetName?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._streetName = input.streetName;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string | undefined { return this._streetName; }
  set streetName(streetName: string | undefined) { this._streetName = streetName; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}
exports.OtherModel = OtherModel;"
`;

exports[`TypeScriptGenerator should render models and their dependencies for ESM module system 1`] = `
"import OtherModel from './OtherModel';
class Address {
  private _streetName: string;
  private _city: string;
  private _state: string;
  private _houseNumber: number;
  private _marriage?: boolean;
  private _members?: string | number | boolean;
  private _arrayType: (string | number | any)[];
  private _otherModel?: OtherModel;
  private _additionalProperties?: Map<string, any | string>;

  constructor(input: {
    streetName: string,
    city: string,
    state: string,
    houseNumber: number,
    marriage?: boolean,
    members?: string | number | boolean,
    arrayType: (string | number | any)[],
    otherModel?: OtherModel,
    additionalProperties?: Map<string, any | string>,
  }) {
    this._streetName = input.streetName;
    this._city = input.city;
    this._state = input.state;
    this._houseNumber = input.houseNumber;
    this._marriage = input.marriage;
    this._members = input.members;
    this._arrayType = input.arrayType;
    this._otherModel = input.otherModel;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string { return this._streetName; }
  set streetName(streetName: string) { this._streetName = streetName; }

  get city(): string { return this._city; }
  set city(city: string) { this._city = city; }

  get state(): string { return this._state; }
  set state(state: string) { this._state = state; }

  get houseNumber(): number { return this._houseNumber; }
  set houseNumber(houseNumber: number) { this._houseNumber = houseNumber; }

  get marriage(): boolean | undefined { return this._marriage; }
  set marriage(marriage: boolean | undefined) { this._marriage = marriage; }

  get members(): string | number | boolean | undefined { return this._members; }
  set members(members: string | number | boolean | undefined) { this._members = members; }

  get arrayType(): (string | number | any)[] { return this._arrayType; }
  set arrayType(arrayType: (string | number | any)[]) { this._arrayType = arrayType; }

  get otherModel(): OtherModel | undefined { return this._otherModel; }
  set otherModel(otherModel: OtherModel | undefined) { this._otherModel = otherModel; }

  get additionalProperties(): Map<string, any | string> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any | string> | undefined) { this._additionalProperties = additionalProperties; }
}
export default Address;
"
`;

exports[`TypeScriptGenerator should render models and their dependencies for ESM module system 2`] = `
"
class OtherModel {
  private _streetName?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    streetName?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._streetName = input.streetName;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string | undefined { return this._streetName; }
  set streetName(streetName: string | undefined) { this._streetName = streetName; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}
export default OtherModel;
"
`;

exports[`TypeScriptGenerator should render models and their dependencies for ESM module system with named exports 1`] = `
"import {OtherModel} from './OtherModel';
class Address {
  private _streetName: string;
  private _city: string;
  private _state: string;
  private _houseNumber: number;
  private _marriage?: boolean;
  private _members?: string | number | boolean;
  private _arrayType: (string | number | any)[];
  private _otherModel?: OtherModel;
  private _additionalProperties?: Map<string, any | string>;

  constructor(input: {
    streetName: string,
    city: string,
    state: string,
    houseNumber: number,
    marriage?: boolean,
    members?: string | number | boolean,
    arrayType: (string | number | any)[],
    otherModel?: OtherModel,
    additionalProperties?: Map<string, any | string>,
  }) {
    this._streetName = input.streetName;
    this._city = input.city;
    this._state = input.state;
    this._houseNumber = input.houseNumber;
    this._marriage = input.marriage;
    this._members = input.members;
    this._arrayType = input.arrayType;
    this._otherModel = input.otherModel;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string { return this._streetName; }
  set streetName(streetName: string) { this._streetName = streetName; }

  get city(): string { return this._city; }
  set city(city: string) { this._city = city; }

  get state(): string { return this._state; }
  set state(state: string) { this._state = state; }

  get houseNumber(): number { return this._houseNumber; }
  set houseNumber(houseNumber: number) { this._houseNumber = houseNumber; }

  get marriage(): boolean | undefined { return this._marriage; }
  set marriage(marriage: boolean | undefined) { this._marriage = marriage; }

  get members(): string | number | boolean | undefined { return this._members; }
  set members(members: string | number | boolean | undefined) { this._members = members; }

  get arrayType(): (string | number | any)[] { return this._arrayType; }
  set arrayType(arrayType: (string | number | any)[]) { this._arrayType = arrayType; }

  get otherModel(): OtherModel | undefined { return this._otherModel; }
  set otherModel(otherModel: OtherModel | undefined) { this._otherModel = otherModel; }

  get additionalProperties(): Map<string, any | string> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any | string> | undefined) { this._additionalProperties = additionalProperties; }
}
export { Address };"
`;

exports[`TypeScriptGenerator should render models and their dependencies for ESM module system with named exports 2`] = `
"
class OtherModel {
  private _streetName?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    streetName?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._streetName = input.streetName;
    this._additionalProperties = input.additionalProperties;
  }

  get streetName(): string | undefined { return this._streetName; }
  set streetName(streetName: string | undefined) { this._streetName = streetName; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}
export { OtherModel };"
`;

exports[`TypeScriptGenerator should render union \`enum\` values 1`] = `
"enum States {
  NUMBER_2 = 2,
  RESERVED_NUMBER_2 = \\"2\\",
  TEST = \\"test\\",
  RESERVED_TRUE = \\"true\\",
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT = '{\\"test\\":\\"test\\"}',
}"
`;

exports[`TypeScriptGenerator should work custom preset for \`class\` type 1`] = `
"class CustomClass {
  @JsonProperty(\\"property\\")
  private _property?: string;
  @JsonProperty(\\"additionalProperties\\")
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    property?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._property = input.property;
    this._additionalProperties = input.additionalProperties;
  }

  get property(): string | undefined { return this._property; }
  set property(property: string | undefined) { this._property = property; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}"
`;

exports[`TypeScriptGenerator should work custom preset for \`enum\` type 1`] = `
"enum CustomEnum {
  TEXAS = \\"Texas\\",
  ALABAMA = \\"Alabama\\",
  CALIFORNIA = \\"California\\",
}"
`;

exports[`TypeScriptGenerator should work custom preset for \`interface\` type 1`] = `
"class CustomInterface {
  private _property?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    property?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._property = input.property;
    this._additionalProperties = input.additionalProperties;
  }

  get property(): string | undefined { return this._property; }
  set property(property: string | undefined) { this._property = property; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }
}"
`;
