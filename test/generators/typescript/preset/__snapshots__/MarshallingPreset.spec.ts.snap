// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Marshalling preset should render un/marshal code 1`] = `
"class Test {
  private _stringProp: string;
  private _enumProp?: EnumTest;
  private _numberProp?: number;
  private _nestedObject?: NestedTest;
  private _unionTest?: NestedTest | string;
  private _unionArrayTest?: (NestedTest | string)[];
  private _arrayTest?: NestedTest[];
  private _tupleTest?: [NestedTest, string];
  private _additionalProperties?: Map<string, NestedTest | string>;

  constructor(input: {
    stringProp: string,
    enumProp?: EnumTest,
    numberProp?: number,
    nestedObject?: NestedTest,
    unionTest?: NestedTest | string,
    unionArrayTest?: (NestedTest | string)[],
    arrayTest?: NestedTest[],
    tupleTest?: [NestedTest, string],
    additionalProperties?: Map<string, NestedTest | string>,
  }) {
    this._stringProp = input.stringProp;
    this._enumProp = input.enumProp;
    this._numberProp = input.numberProp;
    this._nestedObject = input.nestedObject;
    this._unionTest = input.unionTest;
    this._unionArrayTest = input.unionArrayTest;
    this._arrayTest = input.arrayTest;
    this._tupleTest = input.tupleTest;
    this._additionalProperties = input.additionalProperties;
  }

  get stringProp(): string { return this._stringProp; }
  set stringProp(stringProp: string) { this._stringProp = stringProp; }

  get enumProp(): EnumTest | undefined { return this._enumProp; }
  set enumProp(enumProp: EnumTest | undefined) { this._enumProp = enumProp; }

  get numberProp(): number | undefined { return this._numberProp; }
  set numberProp(numberProp: number | undefined) { this._numberProp = numberProp; }

  get nestedObject(): NestedTest | undefined { return this._nestedObject; }
  set nestedObject(nestedObject: NestedTest | undefined) { this._nestedObject = nestedObject; }

  get unionTest(): NestedTest | string | undefined { return this._unionTest; }
  set unionTest(unionTest: NestedTest | string | undefined) { this._unionTest = unionTest; }

  get unionArrayTest(): (NestedTest | string)[] | undefined { return this._unionArrayTest; }
  set unionArrayTest(unionArrayTest: (NestedTest | string)[] | undefined) { this._unionArrayTest = unionArrayTest; }

  get arrayTest(): NestedTest[] | undefined { return this._arrayTest; }
  set arrayTest(arrayTest: NestedTest[] | undefined) { this._arrayTest = arrayTest; }

  get tupleTest(): [NestedTest, string] | undefined { return this._tupleTest; }
  set tupleTest(tupleTest: [NestedTest, string] | undefined) { this._tupleTest = tupleTest; }

  get additionalProperties(): Map<string, NestedTest | string> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, NestedTest | string> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.stringProp !== undefined) {
      json += \`\\"string prop\\": \${typeof this.stringProp === 'number' || typeof this.stringProp === 'boolean' ? this.stringProp : JSON.stringify(this.stringProp)},\`;
    }
    if(this.enumProp !== undefined) {
      json += \`\\"enumProp\\": \${typeof this.enumProp === 'number' || typeof this.enumProp === 'boolean' ? this.enumProp : JSON.stringify(this.enumProp)},\`;
    }
    if(this.numberProp !== undefined) {
      json += \`\\"numberProp\\": \${typeof this.numberProp === 'number' || typeof this.numberProp === 'boolean' ? this.numberProp : JSON.stringify(this.numberProp)},\`;
    }
    if(this.nestedObject !== undefined) {
      json += \`\\"nestedObject\\": \${this.nestedObject.marshal()},\`;
    }
    if(this.unionTest !== undefined) {
      if(this.unionTest instanceof NestedTest) {
          json += \`\\"unionTest\\": \${this.unionTest.marshal()},\`;
        } else {
          json += \`\\"unionTest\\": \${typeof this.unionTest === 'number' || typeof this.unionTest === 'boolean' ? this.unionTest : JSON.stringify(this.unionTest)},\`;
        }
    }
    if(this.unionArrayTest !== undefined) {
      const unionArrayTestJsonValues: any[] = [];
      for (const unionItem of this.unionArrayTest) {
        if(unionItem instanceof NestedTest) {
          unionArrayTestJsonValues.push(unionItem.marshal());
        } else {
          unionArrayTestJsonValues.push(typeof unionItem === 'number' || typeof unionItem === 'boolean' ? unionItem : JSON.stringify(unionItem))
        }
      }
      json += \`\\"unionArrayTest\\": [\${unionArrayTestJsonValues.join(',')}],\`;
    }
    if(this.arrayTest !== undefined) {
      let arrayTestJsonValues: any[] = [];
      for (const unionItem of this.arrayTest) {
        arrayTestJsonValues.push(\`\${unionItem.marshal()}\`);
      }
      json += \`\\"arrayTest\\": [\${arrayTestJsonValues.join(',')}],\`;
    }
    if(this.tupleTest !== undefined) {
      const serializedTuple = [];
    if(this.tupleTest[0]) {
      serializedTuple[0] = \${this.tupleTest[0].marshal()}
    } else {
      serializedTuple[0] = null;
    }
    if(this.tupleTest[1]) {
      serializedTuple[1] = \${typeof this.tupleTest[1] === 'number' || typeof this.tupleTest[1] === 'boolean' ? this.tupleTest[1] : JSON.stringify(this.tupleTest[1])}
    } else {
      serializedTuple[1] = null;
    }
    json += \`\\"tupleTest\\": [\${serializedTuple.join(',')}],\`;
    }
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only unwrap those that are not already a property in the JSON object
        if([\\"string prop\\",\\"enumProp\\",\\"numberProp\\",\\"nestedObject\\",\\"unionTest\\",\\"unionArrayTest\\",\\"arrayTest\\",\\"tupleTest\\",\\"additionalProperties\\"].includes(String(key))) continue;
        if(value instanceof NestedTest) {
          json += \`\\"\${key}\\": \${value.marshal()},\`;
        } else {
          json += \`\\"\${key}\\": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
        }
      }
    }
    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): Test {
    const obj = typeof json === \\"object\\" ? json : JSON.parse(json);
    const instance = new Test({} as any);

    if (obj[\\"string prop\\"] !== undefined) {
      instance.stringProp = obj[\\"string prop\\"];
    }
    if (obj[\\"enumProp\\"] !== undefined) {
      instance.enumProp = obj[\\"enumProp\\"];
    }
    if (obj[\\"numberProp\\"] !== undefined) {
      instance.numberProp = obj[\\"numberProp\\"];
    }
    if (obj[\\"nestedObject\\"] !== undefined) {
      instance.nestedObject = NestedTest.unmarshal(obj[\\"nestedObject\\"]);
    }
    if (obj[\\"unionTest\\"] !== undefined) {
      instance.unionTest = obj[\\"unionTest\\"];
    }
    if (obj[\\"unionArrayTest\\"] !== undefined) {
      instance.unionArrayTest = obj[\\"unionArrayTest\\"];
    }
    if (obj[\\"arrayTest\\"] !== undefined) {
      instance.arrayTest = obj[\\"arrayTest\\"];
    }
    if (obj[\\"tupleTest\\"] !== undefined) {
      instance.tupleTest = obj[\\"tupleTest\\"];
    }
  
    instance.additionalProperties = new Map();
    const propsToCheck = Object.entries(obj).filter((([key,]) => {return ![\\"string prop\\",\\"enumProp\\",\\"numberProp\\",\\"nestedObject\\",\\"unionTest\\",\\"unionArrayTest\\",\\"arrayTest\\",\\"tupleTest\\",\\"additionalProperties\\"].includes(key);}));
    for (const [key, value] of propsToCheck) {
      instance.additionalProperties.set(key, value as any);
    }
    return instance;
  }
}"
`;

exports[`Marshalling preset should render un/marshal code 2`] = `
"enum EnumTest {
  SOME_SPACE_ENUM_SPACE_STRING = \\"Some enum String\\",
  RESERVED_TRUE = \\"true\\",
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT = '{\\"test\\":\\"test\\"}',
  NUMBER_2 = 2,
}"
`;

exports[`Marshalling preset should render un/marshal code 3`] = `
"class NestedTest {
  private _stringProp?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    stringProp?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._stringProp = input.stringProp;
    this._additionalProperties = input.additionalProperties;
  }

  get stringProp(): string | undefined { return this._stringProp; }
  set stringProp(stringProp: string | undefined) { this._stringProp = stringProp; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.stringProp !== undefined) {
      json += \`\\"stringProp\\": \${typeof this.stringProp === 'number' || typeof this.stringProp === 'boolean' ? this.stringProp : JSON.stringify(this.stringProp)},\`;
    }
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only unwrap those that are not already a property in the JSON object
        if([\\"stringProp\\",\\"additionalProperties\\"].includes(String(key))) continue;
        json += \`\\"\${key}\\": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
      }
    }
    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): NestedTest {
    const obj = typeof json === \\"object\\" ? json : JSON.parse(json);
    const instance = new NestedTest({} as any);

    if (obj[\\"stringProp\\"] !== undefined) {
      instance.stringProp = obj[\\"stringProp\\"];
    }
  
    instance.additionalProperties = new Map();
    const propsToCheck = Object.entries(obj).filter((([key,]) => {return ![\\"stringProp\\",\\"additionalProperties\\"].includes(key);}));
    for (const [key, value] of propsToCheck) {
      instance.additionalProperties.set(key, value as any);
    }
    return instance;
  }
}"
`;
