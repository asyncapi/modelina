// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Marshalling preset should render un/marshal code 1`] = `
"class Test {
  private _stringProp: string;
  private _enumProp?: EnumTest;
  private _numberProp?: number;
  private _additionalProperties?: Map<string, NestedTest>;

  constructor(input: {
    stringProp: string,
    enumProp?: EnumTest,
    numberProp?: number,
    additionalProperties?: Map<string, NestedTest>,
  }) {
    this._stringProp = input.stringProp;
    this._enumProp = input.enumProp;
    this._numberProp = input.numberProp;
    this._additionalProperties = input.additionalProperties;
  }

  get stringProp(): string { return this._stringProp; }
  set stringProp(stringProp: string) { this._stringProp = stringProp; }

  get enumProp(): EnumTest | undefined { return this._enumProp; }
  set enumProp(enumProp: EnumTest | undefined) { this._enumProp = enumProp; }

  get numberProp(): number | undefined { return this._numberProp; }
  set numberProp(numberProp: number | undefined) { this._numberProp = numberProp; }

  get additionalProperties(): Map<string, NestedTest> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, NestedTest> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.stringProp !== undefined) {
      json += \`\\"string prop\\": \${typeof this.stringProp === 'number' || typeof this.stringProp === 'boolean' ? this.stringProp : JSON.stringify(this.stringProp)},\`; 
    }
    if(this.enumProp !== undefined) {
      json += \`\\"enumProp\\": \${typeof this.enumProp === 'number' || typeof this.enumProp === 'boolean' ? this.enumProp : JSON.stringify(this.enumProp)},\`; 
    }
    if(this.numberProp !== undefined) {
      json += \`\\"numberProp\\": \${typeof this.numberProp === 'number' || typeof this.numberProp === 'boolean' ? this.numberProp : JSON.stringify(this.numberProp)},\`; 
    }
    if(this.additionalProperties !== undefined) {
      json += \`\\"additionalProperties\\": \${typeof this.additionalProperties === 'number' || typeof this.additionalProperties === 'boolean' ? this.additionalProperties : JSON.stringify(this.additionalProperties)},\`; 
    }


    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): Test {
    const obj = typeof json === \\"object\\" ? json : JSON.parse(json);
    const instance = new Test({} as any);

    if (obj[\\"string prop\\"] !== undefined) {
      instance.stringProp = obj[\\"string prop\\"];
    }
    if (obj[\\"enumProp\\"] !== undefined) {
      instance.enumProp = obj[\\"enumProp\\"];
    }
    if (obj[\\"numberProp\\"] !== undefined) {
      instance.numberProp = obj[\\"numberProp\\"];
    }
    if (obj[\\"additionalProperties\\"] !== undefined) {
      instance.additionalProperties = obj[\\"additionalProperties\\"];
    }



    return instance;
  }
}"
`;

exports[`Marshalling preset should render un/marshal code 2`] = `
"enum EnumTest {
  SOME_SPACE_ENUM_SPACE_STRING = \\"Some enum String\\",
  RESERVED_TRUE = \\"true\\",
  CURLYLEFT_QUOTATION_TEST_QUOTATION_COLON_QUOTATION_TEST_QUOTATION_CURLYRIGHT = '{\\"test\\":\\"test\\"}',
  NUMBER_2 = 2,
}"
`;

exports[`Marshalling preset should render un/marshal code 3`] = `
"class NestedTest {
  private _stringProp?: string;
  private _additionalProperties?: Map<string, any>;

  constructor(input: {
    stringProp?: string,
    additionalProperties?: Map<string, any>,
  }) {
    this._stringProp = input.stringProp;
    this._additionalProperties = input.additionalProperties;
  }

  get stringProp(): string | undefined { return this._stringProp; }
  set stringProp(stringProp: string | undefined) { this._stringProp = stringProp; }

  get additionalProperties(): Map<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Map<string, any> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.stringProp !== undefined) {
      json += \`\\"stringProp\\": \${typeof this.stringProp === 'number' || typeof this.stringProp === 'boolean' ? this.stringProp : JSON.stringify(this.stringProp)},\`; 
    }
    if(this.additionalProperties !== undefined) {
      json += \`\\"additionalProperties\\": \${typeof this.additionalProperties === 'number' || typeof this.additionalProperties === 'boolean' ? this.additionalProperties : JSON.stringify(this.additionalProperties)},\`; 
    }


    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): NestedTest {
    const obj = typeof json === \\"object\\" ? json : JSON.parse(json);
    const instance = new NestedTest({} as any);

    if (obj[\\"stringProp\\"] !== undefined) {
      instance.stringProp = obj[\\"stringProp\\"];
    }
    if (obj[\\"additionalProperties\\"] !== undefined) {
      instance.additionalProperties = obj[\\"additionalProperties\\"];
    }



    return instance;
  }
}"
`;
