// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to generate a model with functions to serialize the data model into JSON and should log expected output to console 1`] = `
Array [
  "[JsonConverter(typeof(RootConverter))]
public partial class Root
{
  private string? email;

  public string? Email 
  {
    get { return email; }
    set { email = value; }
  }
}

internal class RootConverter : JsonConverter<Root>
{
  public override bool CanConvert(System.Type objectType)
  {
    // this converter can be applied to any type
    return true;
  }
  public override Root Read(ref Utf8JsonReader reader, System.Type typeToConvert, JsonSerializerOptions options)
  {
    if (reader.TokenType != JsonTokenType.StartObject)
    {
      throw new JsonException();
    }

    var instance = new Root();
  
    while (reader.Read())
    {
      if (reader.TokenType == JsonTokenType.EndObject)
      {
        return instance;
      }

      // Get the key.
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      string propertyName = reader.GetString();
      if (propertyName == \\"email\\")
        {
          var value = JsonSerializer.Deserialize<string?>(ref reader, options);
          instance.Email = value;
          continue;
        }
    }
  
    throw new JsonException();
  }
  public override void Write(Utf8JsonWriter writer, Root value, JsonSerializerOptions options)
  {
    if (value == null)
    {
      JsonSerializer.Serialize(writer, null, options);
      return;
    }
    var properties = value.GetType().GetProperties();
  
    writer.WriteStartObject();

    if(value.Email != null) {
      // write property name and let the serializer serialize the value itself
      writer.WritePropertyName(\\"email\\");
      JsonSerializer.Serialize(writer, value.Email, options);
    }


    writer.WriteEndObject();
  }

}
",
]
`;
