// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to render json-tags in struct and should log expected output to console 1`] = `
Array [
  "// Root represents a Root model.
type Root struct {
  Cities *Cities \`json:\\"cities\\"\`
  Options *Options \`json:\\"options\\"\`
}",
]
`;

exports[`Should be able to render json-tags in struct and should log expected output to console 2`] = `
Array [
  "// Cities represents an enum of Cities.
type Cities uint

const (
  CitiesLondon Cities = iota
  CitiesRome
  CitiesBrussels
)

// Value returns the value of the enum.
func (op Cities) Value() any {
	if op >= Cities(len(CitiesValues)) {
		return nil
	}
	return CitiesValues[op]
}

var CitiesValues = []any{\\"London\\",\\"Rome\\",\\"Brussels\\"}
var ValuesToCities = map[any]Cities{
  CitiesValues[CitiesLondon]: CitiesLondon,
  CitiesValues[CitiesRome]: CitiesRome,
  CitiesValues[CitiesBrussels]: CitiesBrussels,
}

 
func (op *Cities) UnmarshalJSON(raw []byte) error {
  var v any
  if err := json.Unmarshal(raw, &v); err != nil {
  return err
  }
  *op = ValuesToCities[v]
  return nil
}

func (op Cities) MarshalJSON() ([]byte, error) {
  return json.Marshal(op.Value())
}",
]
`;

exports[`Should be able to render json-tags in struct and should log expected output to console 3`] = `
Array [
  "// Options represents an enum of Options.
type Options uint

const (
  OptionsNumber_123 Options = iota
  OptionsNumber_213
  OptionsTrue
  OptionsRun
)

// Value returns the value of the enum.
func (op Options) Value() any {
	if op >= Options(len(OptionsValues)) {
		return nil
	}
	return OptionsValues[op]
}

var OptionsValues = []any{123,213,true,\\"Run\\"}
var ValuesToOptions = map[any]Options{
  OptionsValues[OptionsNumber_123]: OptionsNumber_123,
  OptionsValues[OptionsNumber_213]: OptionsNumber_213,
  OptionsValues[OptionsTrue]: OptionsTrue,
  OptionsValues[OptionsRun]: OptionsRun,
}

 
func (op *Options) UnmarshalJSON(raw []byte) error {
  var v any
  if err := json.Unmarshal(raw, &v); err != nil {
  return err
  }
  *op = ValuesToOptions[v]
  return nil
}

func (op Options) MarshalJSON() ([]byte, error) {
  return json.Marshal(op.Value())
}",
]
`;
