// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: nested-model 1`] = `
Array [
  "

class ObjProperty: 
  def __init__(self, input: dict):
    if hasattr(input, \\"number\\"):
    	self._number: float = input[\\"number\\"]
    if hasattr(input, \\"additionalProperties\\"):
    	self._additionalProperties: dict[Any, Any] = input[\\"additionalProperties\\"]

  @property
  def number(self) -> float:
  	return self._number
  @number.setter
  def number(self, number: float):
  	self._number = number

  @property
  def additionalProperties(self) -> dict[Any, Any]:
  	return self._additionalProperties
  @additionalProperties.setter
  def additionalProperties(self, additionalProperties: dict[Any, Any]):
  	self._additionalProperties = additionalProperties
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: nested-model 2`] = `
Array [
  "

class ObjProperty: 
  def __init__(self, input: dict):
    if hasattr(input, \\"number\\"):
    	self._number: float = input[\\"number\\"]
    if hasattr(input, \\"additionalProperties\\"):
    	self._additionalProperties: dict[Any, Any] = input[\\"additionalProperties\\"]

  @property
  def number(self) -> float:
  	return self._number
  @number.setter
  def number(self, number: float):
  	self._number = number

  @property
  def additionalProperties(self) -> dict[Any, Any]:
  	return self._additionalProperties
  @additionalProperties.setter
  def additionalProperties(self, additionalProperties: dict[Any, Any]):
  	self._additionalProperties = additionalProperties
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: root-model-explicit-import 1`] = `
Array [
  "from ObjProperty import ObjProperty

class Root: 
  def __init__(self, input: dict):
    if hasattr(input, \\"email\\"):
    	self._email: str = input[\\"email\\"]
    if hasattr(input, \\"objProperty\\"):
    	self._objProperty: ObjProperty = ObjProperty(input[\\"objProperty\\"])

  @property
  def email(self) -> str:
  	return self._email
  @email.setter
  def email(self, email: str):
  	self._email = email

  @property
  def objProperty(self) -> ObjProperty:
  	return self._objProperty
  @objProperty.setter
  def objProperty(self, objProperty: ObjProperty):
  	self._objProperty = objProperty
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: root-model-implicit-import 1`] = `
Array [
  "from ObjProperty import ObjProperty

class Root: 
  def __init__(self, input: dict):
    if hasattr(input, \\"email\\"):
    	self._email: str = input[\\"email\\"]
    if hasattr(input, \\"objProperty\\"):
    	self._objProperty: ObjProperty = ObjProperty(input[\\"objProperty\\"])

  @property
  def email(self) -> str:
  	return self._email
  @email.setter
  def email(self, email: str):
  	self._email = email

  @property
  def objProperty(self) -> ObjProperty:
  	return self._objProperty
  @objProperty.setter
  def objProperty(self, objProperty: ObjProperty):
  	self._objProperty = objProperty
",
]
`;
