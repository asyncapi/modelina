// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: nested-model 1`] = `
Array [
  "

class ObjProperty: 
  def __init__(self, input):
    if hasattr(input, 'number'):
      self._number = input.number
    if hasattr(input, 'additional_properties'):
      self._additional_properties = input.additional_properties

  @property
  def number(self):
    return self._number
  @number.setter
  def number(self, number):
    self._number = number

  @property
  def additional_properties(self):
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties):
    self._additional_properties = additional_properties
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: nested-model 2`] = `
Array [
  "

class ObjProperty: 
  def __init__(self, input):
    if hasattr(input, 'number'):
      self._number = input.number
    if hasattr(input, 'additional_properties'):
      self._additional_properties = input.additional_properties

  @property
  def number(self):
    return self._number
  @number.setter
  def number(self, number):
    self._number = number

  @property
  def additional_properties(self):
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties):
    self._additional_properties = additional_properties
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: root-model-explicit-import 1`] = `
Array [
  "from ObjProperty import ObjProperty

class Root: 
  def __init__(self, input):
    if hasattr(input, 'email'):
      self._email = input.email
    if hasattr(input, 'obj_property'):
      self._obj_property = input.obj_property

  @property
  def email(self):
    return self._email
  @email.setter
  def email(self, email):
    self._email = email

  @property
  def obj_property(self):
    return self._obj_property
  @obj_property.setter
  def obj_property(self, obj_property):
    self._obj_property = obj_property
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: root-model-implicit-import 1`] = `
Array [
  "from ObjProperty import ObjProperty

class Root: 
  def __init__(self, input):
    if hasattr(input, 'email'):
      self._email = input.email
    if hasattr(input, 'obj_property'):
      self._obj_property = input.obj_property

  @property
  def email(self):
    return self._email
  @email.setter
  def email(self, email):
    self._email = email

  @property
  def obj_property(self):
    return self._obj_property
  @obj_property.setter
  def obj_property(self, obj_property):
    self._obj_property = obj_property
",
]
`;
