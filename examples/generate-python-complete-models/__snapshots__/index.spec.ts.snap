// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: nested-model 1`] = `
Array [
  "from __future__ import annotations
from typing import Any, Dict

class ObjProperty: 
  def __init__(self, input: Dict):
    if 'number' in input:
      self._number: float = input['number']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def number(self) -> float:
    return self._number
  @number.setter
  def number(self, number: float):
    self._number = number

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: nested-model 2`] = `
Array [
  "from __future__ import annotations
from typing import Any, Dict

class ObjProperty: 
  def __init__(self, input: Dict):
    if 'number' in input:
      self._number: float = input['number']
    if 'additional_properties' in input:
      self._additional_properties: dict[str, Any] = input['additional_properties']

  @property
  def number(self) -> float:
    return self._number
  @number.setter
  def number(self, number: float):
    self._number = number

  @property
  def additional_properties(self) -> dict[str, Any]:
    return self._additional_properties
  @additional_properties.setter
  def additional_properties(self, additional_properties: dict[str, Any]):
    self._additional_properties = additional_properties
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: root-model-explicit-import 1`] = `
Array [
  "from __future__ import annotations
from typing import Any, Dict
from . import ObjProperty
class Root: 
  def __init__(self, input: Dict):
    if 'email' in input:
      self._email: str = input['email']
    if 'obj_property' in input:
      self._obj_property: ObjProperty.ObjProperty = ObjProperty.ObjProperty(input['obj_property'])

  @property
  def email(self) -> str:
    return self._email
  @email.setter
  def email(self, email: str):
    self._email = email

  @property
  def obj_property(self) -> ObjProperty.ObjProperty:
    return self._obj_property
  @obj_property.setter
  def obj_property(self, obj_property: ObjProperty.ObjProperty):
    self._obj_property = obj_property
",
]
`;

exports[`Should be able to render python models and should generate \`implicit\` or \`explicit\` imports for models implementing referenced types: root-model-implicit-import 1`] = `
Array [
  "from __future__ import annotations
from typing import Any, Dict
from . import ObjProperty
class Root: 
  def __init__(self, input: Dict):
    if 'email' in input:
      self._email: str = input['email']
    if 'obj_property' in input:
      self._obj_property: ObjProperty.ObjProperty = ObjProperty.ObjProperty(input['obj_property'])

  @property
  def email(self) -> str:
    return self._email
  @email.setter
  def email(self, email: str):
    self._email = email

  @property
  def obj_property(self) -> ObjProperty.ObjProperty:
    return self._obj_property
  @obj_property.setter
  def obj_property(self, obj_property: ObjProperty.ObjProperty):
    self._obj_property = obj_property
",
]
`;
