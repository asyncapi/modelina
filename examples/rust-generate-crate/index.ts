import { RustFileGenerator, RustRenderCompleteModelOptions, RUST_COMMON_PRESET, defaultRustRenderCompleteModelOptions, RustPackageFeatures } from '../../src/generators';
import * as path from 'path';

const doc = {
  $id: '_address',
  type: 'object',
  properties: {
    street_name: { type: 'string' },
    city: { type: 'string', description: 'City description' },
    state: { type: 'string' },
    house_number: { type: 'number' },
    marriage: { type: 'boolean', description: 'Status if marriage live in given house' },
    members: { oneOf: [{ type: 'string' }, { type: 'number' }, { type: 'boolean' }], },
    tuple_type: { type: 'array', items: [{ type: 'string' }, { type: 'number' }], additionalItems: false },
    array_type: { type: 'array', items: { type: 'string' }, additionalItems: false },
    enum_type: {
      enum: ['Texas', 'Alabama', 'California'],
      default: 'California'
    }
  },
  required: ['street_name', 'city', 'state', 'house_number', 'array_type'],
  additionalProperties: {
    type: 'string'
  },
};

export async function generate(): Promise<void> {
  // initialize the generator from a preset
  const generator = new RustFileGenerator({
    presets: [
      {
        preset: RUST_COMMON_PRESET, options: {
          implementNew: true,
          implementDefault: true
        }
      }
    ]
  });
  // Generated files will be written to output/ directory
  const outDir = path.join(__dirname, 'output');

  // Run the file generator with options
  const models = await generator.generateToPackage(doc, outDir, {
    ...defaultRustRenderCompleteModelOptions,
    supportFiles: true, // generate Cargo.toml and lib.rs
    package: {
      packageName: 'asyncapi-rs-example',
      packageVersion: '1.0.0',
      // set authors, homepage, repository, and license
      authors: ['AsyncAPI Rust Champions'],
      homepage: 'https://www.asyncapi.com/tools/modelina',
      repository: 'https://github.com/asyncapi/modelina',
      license: 'Apache-2.0',
      description: 'Rust models generated by AsyncAPI Modelina',
      // support 2018 editions and up
      edition: '2018',
      // enable serde_json
      packageFeatures: [RustPackageFeatures.json] as RustPackageFeatures[]
    }
  } as RustRenderCompleteModelOptions);
  for (const model of models) {
    console.log(model.result);
  }
}
if (require.main === module) {
  generate();
}
