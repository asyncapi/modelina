// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should be able to render Rust Models and should log expected output to console 1`] = `
"// Address represents a Address model.
#[derive(Clone, Debug, PartialEq)]
pub struct Address {
    pub street_name: String,
    pub city: String,
    pub state: String,
    pub house_number: f64,
    pub marriage: Option<bool>,
    pub members: Option<Box<crate::Members>>,
    pub tuple_type: Option<Box<crate::TupleType>>,
    pub array_type: Vec<String>,
    pub enum_type: Option<Box<crate::EnumType>>,
    pub additional_properties: Option<std::collections::HashMap<String, String>>,
}

impl Address {
    pub fn new(street_name: String, city: String, state: String, house_number: f64, marriage: Option<bool>, members: Option<crate::Members>, tuple_type: Option<crate::TupleType>, array_type: Vec<String>, enum_type: Option<crate::EnumType>, additional_properties: Option<std::collections::HashMap<String, String>>) -> Address {
        Address {
            street_name,
            city,
            state,
            house_number,
            marriage,
            members: members.map(Box::new),
            tuple_type: tuple_type.map(Box::new),
            array_type,
            enum_type: enum_type.map(Box::new),
            additional_properties,
        }
    }
}

// Members represents a union of types: String, f64, bool
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub enum Members {
    MembersOneOf00(String),
    MembersOneOf11(f64),
    MembersOneOf22(bool),
}


// TupleType represents a TupleType model.
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub struct TupleType(String, f64);

impl TupleType {
    pub fn new(value_0: String, value_1: f64) -> TupleType {
        TupleType(value_0, value_1)
    }
}


// EnumType represents a EnumType model.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum EnumType {
    Texas,
    Alabama,
    California,
}
impl Default for EnumType {
    fn default() -> EnumType {
        EnumType::California
    }
}
[package]
name = \\"asyncapi-rs-example\\"
version = \\"1.0.0\\"
authors = [\\"AsyncAPI Rust Champions\\"]
homepage = \\"https://www.asyncapi.com/tools/modelina\\"
repository = \\"https://github.com/asyncapi/modelina\\"
license = \\"Apache-2.0\\"
description = \\"Rust models generated by AsyncAPI Modelina\\"
edition = \\"2018\\"

[dependencies]
serde = { version = \\"1\\", features = [\\"derive\\"] }
serde_json = { version=\\"1\\", optional = true }

[dev-dependencies]

[features]
default = [\\"json\\"]
json = [\\"dep:serde_json\\"]
#[macro_use]
extern crate serde;
extern crate serde_json;

pub mod address;
pub use self::address::*;

pub mod members;
pub use self::members::*;

pub mod tuple_type;
pub use self::tuple_type::*;

pub mod enum_type;
pub use self::enum_type::*;"
`;
